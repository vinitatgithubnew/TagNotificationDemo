    @Library('pipeline-framework')_
    properties(
        [
            [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], 
            parameters(
                [
                    separator(name: "SEPARATOR_INFRASTRUCTURE", sectionHeader: "INFRASTRUCTURE",sectionHeaderStyle: """background-color: #FAD7A0;text-align: center;padding: 4px;color: #343434;font-size: 22px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    //booleanParam(defaultValue: true, description: '', name: 'IS_HELM3'),
                    string(defaultValue: 'helm', description: '', name: 'HELM_BINARY', trim: false),
                    booleanParam(defaultValue: false, description: 'Custom Binary Path to pick binaries like helm,java,kubectl etc. from <USER-HOME-DIRECTORY>/bin', name: 'CUSTOM_BINARY_PATH'),
                    validatingString(defaultValue: '', regex: '\\w+[\\w+\\W*\\w+].*', description: 'Provide node name', name: 'AGENT', failedValidationMessage: 'Provide AGENT value'),
                    string(defaultValue: 'github', description: 'Provide GIT REPO Id from Credentials', name: 'CHECKOUT_USING_USER', trim: true),
                    string(defaultValue: 'kubeconfig', description: '', name: 'KUBECONFIG_CREDENTIAL', trim: true),
                    separator(name: "SEPARATOR_CODE", sectionHeader: "CODE",sectionHeaderStyle: """background-color: #FAD7A0;text-align: center;padding: 4px;color: #343434;font-size: 22px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    //booleanParam(defaultValue: true, description: '', name: 'LOCAL_GIT'),
                    string(defaultValue: '', description: 'Provide git user home dir. eg: /home/git', name: 'GIT_USER_HOME_DIR', trim: true),
                    //validatingString(defaultValue: '', regex: '\\w+[\\w+\\W*\\w+]*', description: 'Provide git user home dir. eg: /home/git', name: 'GIT_USER_HOME_DIR', failedValidationMessage: 'Provide git user home dir'),
                    string(defaultValue: '', description: 'Provide ITSM_Repo path', name: 'DEVOPS_REPO', trim: true),
                    string(defaultValue: '', description: 'Provide CUSTOMER_CONFIGS path', name: 'CUSTOMER_CONFIGS', trim: true),
                    string(defaultValue: '', description: 'Provide PLAYBOOKS_REPO path', name: 'PLAYBOOKS_REPO', trim: true),
                    string(defaultValue: '', description: 'Provide HELM_REPO path', name: 'HELM_REPO', trim: true),
                    string(defaultValue: '', description: 'Provide SMARTAPPS_HELM_REPO path', name: 'SMARTAPPS_HELM_REPO', trim: true),
                    string(defaultValue: '', description: 'Provide SMARTREPORTING_PLAYBOOKS_REPO path', name: 'SMARTREPORTING_PLAYBOOKS_REPO', trim: true),                   
                    string(defaultValue: '', description: 'Provide SMARTREPORTING_HELM_REPO path', name: 'SMARTREPORTING_HELM_REPO', trim: true),
                    //string(defaultValue: 'master', description: '', name: 'VERSION',trim: true),
                    //string(defaultValue: '10R', description: '', name: 'PLAYBOOKS_REPO_VERSION',trim: true),																																								
                    separator(name: "SEPARATOR_CODE", sectionHeader: "CUSTOMER-INFO",sectionHeaderStyle: """background-color: #FAD7A0;text-align: center;padding: 4px;color: #343434;font-size: 22px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    booleanParam(defaultValue: false, description: 'Please select this option if your Kubernetes/Openshift is on cloud environment', name: 'IS_CLOUD'),
                    booleanParam(defaultValue: false, description: '', name: 'ROUTE_ENABLED'),
                    booleanParam(defaultValue: false, description: '', name: 'ROUTE_TLS_ENABLED'),
                    booleanParam(defaultValue: false, description: 'Select this only if restricted scc is enabled in your openshift cluster', name: 'OS_RESTRICTED_SCC'),
                    //booleanParam(defaultValue: true, description: '', name: 'ITSM_INSIGHTS_ENABLED'),
                    //booleanParam(defaultValue: 'true', description: 'Uncheck this if compact deployment is not needed', name: 'COMPACT_DEPLOYMENT'),
                    choice(choices: ['FRESH','UPDATE','UPGRADE','SERVICE'], description: '', name: 'DEPLOYMENT_MODE'),
                    //booleanParam(defaultValue: false, description: '', name: 'ROLLING_RESTART'),
                    string(defaultValue: '', description: '', name: 'CLUSTER', trim: true),
                    string(defaultValue: '', description: '', name: 'CUSTOMER_NAME', trim: true),
                    string(defaultValue: '', description: 'Provide Helix Innovation Suite Namespace', name: 'IS_NAMESPACE', trim: true),
                    string(defaultValue: '', description: '', name: 'CUSTOMER_SERVICE', trim: true),
                    string(defaultValue: '',name: 'ENVIRONMENT', value: "train"),
                    string(defaultValue: 'nginx', description: '', name: 'INGRESS_CLASS', trim: true),
                    string(defaultValue: '', description: '', name: 'CLUSTER_DOMAIN', trim: true),
                    choice(choices: ['Generate_Input_File','Manual_Input_File'], description: '[1]Generate_Input_File -> Generates Input config file based on parameters Provided to this pipeline.\n[2]Manual_Input_File -> Provide inputs file through INPUT_CONFIG_FILE param, if this option is selected.', name: 'INPUT_CONFIG_METHOD'),
                    file(name:'INPUT_CONFIG_FILE', description:'Provide Input Config File here'),
                    file(name:'CACERTS_FILE', description:'Provide cacerts File here'),
                    password(defaultValue: '', description: 'Leave this blank to use default java truststore password. Provide a value if you wish to use a custom password.', name: 'CACERTS_SSL_TRUSTSTORE_PASSWORD'),
                    file(name:'DB_SSL_CERT', description:'This is applicable for Postgres DB which has SSL enabled. Provide root.crt file here.'),
                    choice(choices: ['C','S','M','L'], description: '', name: 'CUSTOMER_SIZE'),
                    choice(choices: ['NA','2021302.1.00.00','2021304.1.00.00','2021305.1.05.00','2021306.1.00.00','2021306.1.03.00','2021306.1.07.00','2021307.1.00.00','2021308.1.00.00','2021308.1.02.00','2021308.1.03.00','2021308.1.04.00','2021308.1.06.00','2021308.1.08.00','2021308.1.09.00','2021308.1.08.00','2021308.1.08.00','2021308.1.08.00'], description: 'Only Applicable in case of DEPLOYMENT_MODE as UPDATE or UPGRADE', name: 'SOURCE_VERSION'),
                    choice(choices: ['2022106.0.02.00'], description: '', name: 'PLATFORM_HELM_VERSION'),
                    choice(choices: ['NA','2021302.1.00.00','2021303.1.03.00','2021303.1.05.00','210503.1.05.00'], description: 'Only Applicable in case of DEPLOYMENT_MODE as UPDATE or UPGRADE', name: 'SMARTREPORTING_SOURCE_VERSION'),
                    //choice(choices: ['2021304.0.01.00'], description: '', name: 'SMARTREPORTING_HELM_VERSION'),
                    choice(choices: ['2022106.0.02.01'], description    : '', name: 'SMARTAPPS_HELM_VERSION'),
                    string(defaultValue: '', description: '', name: 'HELM_NODE', trim: true),
                    //booleanParam(defaultValue: false, description: '', name: 'SERVICE_MODE'),																 
                    separator(name: "SEPARATOR_CODE", sectionHeader: "PRODUCTS",sectionHeaderStyle: """background-color: #FAD7A0;text-align: center;padding: 4px;color: #343434;font-size: 22px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    //booleanParam(defaultValue: 'true', description: '', name: 'HELIX_REMEDY'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_VIRTUALCHAT'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_OPENFIRE'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_DWP'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_DWPA'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_BWF'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_MCSM'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_ITSM_INSIGHTS'),
                    booleanParam(defaultValue: 'false', description: '', name: 'HELIX_TSOMPLUGIN'),
                    //booleanParam(defaultValue: 'false', description: '', name: 'HELIX_SMARTAPPS_TELCO'),
                    booleanParam(defaultValue: 'false', description: '', name: 'HELIX_SMARTAPPS_CSM'),
                    booleanParam(defaultValue: 'false', description: '', name: 'HELIX_SMARTAPPS_FAS'),
                    booleanParam(defaultValue: 'false', description: '', name: 'HELIX_DRIFTMANAGEMENTPLUGIN'),
                    //booleanParam(defaultValue: 'false', description: '', name: 'HELIX_SCCM'),
                    //booleanParam(defaultValue: 'false', description: '', name: 'HELIX_BCM'),
                    // booleanParam(defaultValue: 'true', description: '', name: 'BLUEMIX_HELIX_COGNITIVE_CHATBOT'),
                    // choice(choices: ['premium','plus'], description: '', name: 'BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN'),
                    // booleanParam(defaultValue: 'true', description: '', name: 'BLUEMIX_HELIX_COGNITIVE_AUTOMATION'),
                    // choice(choices: ['standard','plus'], description: '', name: 'BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN'),
                    // choice(choices: ['standard'], description: '', name: 'BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN'),
                    // booleanParam(defaultValue: 'true', description: '', name: 'BLUEMIX_HELIX_COGNITIVE_SEARCH'),
                    // choice(choices: ['advanced','premium','lite'], description: '', name: 'BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN'),
                    separator(name: "SEPARATOR_INFRASTRUCTURE", sectionHeader: "INFRA-DEPLOY",sectionHeaderStyle: """background-color: #FAD7A0;text-align: center;padding: 4px;color: #343434;font-size: 22px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    //booleanParam(defaultValue: 'false', description: 'Performs PreConfiguration Checks', name: 'PREINSTALL_CHECKS'),
                    //booleanParam(defaultValue: 'false', description: 'Performs: [1] Deploy RSSO [2] Validate RSSO Installation [3] RSSO Realm Creation', name: 'RSSO_DEPLOY'),
                    //booleanParam(defaultValue: 'true', description: 'Performs: [1] Deploy FULENTBIT [2] Deploy ELASTICSEARCH [3] Deploy KIBANA', name: 'FLUENTBIT_DEPLOY'),
                    booleanParam(defaultValue: 'false', description: 'Select this pipeline to deploy Support Assistant Tool Application (UI)', name: 'SUPPORT_ASSISTANT_TOOL'),
                    booleanParam(defaultValue: 'false', description: 'Select this option to deploy Sidecar Support Assistant Tool fpackager container', name: 'SIDECAR_SUPPORT_ASSISTANT_FPACK'),
                    booleanParam(defaultValue: 'true', description: 'Uncheck this option to manually create Support Assistant Role', name: 'SUPPORT_ASSISTANT_CREATE_ROLE'),
                    string(defaultValue: 'default', description: '', name: 'SUPPORT_ASSISTANT_SERVICE_ACCOUNT', trim: true),
                    //booleanParam(defaultValue: 'true', description: 'Select this to deploy ElasticSearch and Kibana', name: 'ELASTICSEARCH_DEPLOY'),
                    //booleanParam(defaultValue: 'false', description: 'Select this to deploy Fluentbit', name: 'FLUENTBIT_DEPLOY'),
                    booleanParam(defaultValue: 'false', description: 'Select this option to deploy Sidecar fluent-bit container', name: 'SIDECAR_FLUENTBIT'),
                    booleanParam(defaultValue: 'false', description: '', name: 'SIDECAR_FLUENT_DETAIL_LOG'),
                    separator(name: "SEPARATOR_CODE", sectionHeader: "PRODUCT-DEPLOY",sectionHeaderStyle: """background-color: #FAD7A0;text-align: center;padding: 4px;color: #343434;font-size: 22px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_GENERATE_CONFIG'),
                    //booleanParam(defaultValue: 'false', description: '', name: 'HELIX_PRE_PROCESS'),
                    //booleanParam(defaultValue: 'false', description: '', name: 'HELIX_PRE_CUTOVER'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_PLATFORM_DEPLOY'),
                    booleanParam(defaultValue: 'false', description: 'Select this if you need smartreporting to be deployed', name: 'HELIX_SMARTREPORTING_DEPLOY'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_NONPLATFORM_DEPLOY'),
                    booleanParam(defaultValue: 'true', description: 'Select this only in case of FRESH deployment', name: 'HELIX_CONFIGURE_ITSM'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_SMARTAPPS_DEPLOY'),
                    //booleanParam(defaultValue: 'false', description: '', name: 'HELIX_SMARTAPPS_CONFIG'),
                    //booleanParam(defaultValue: 'false', description: '', name: 'HELIX_POST_CUTOVER'),
                    booleanParam(defaultValue: 'true', description: '', name: 'HELIX_INTEROPS_DEPLOY'),
                    booleanParam(defaultValue: 'true', description: 'Select this option to trigger upgrade pipeline when DEPLOYMENT_MODE is UPGRADE', name: 'HELIX_FULL_STACK_UPGRADE'),
                    booleanParam(defaultValue: 'false', description: 'Select this option only after successful deployment of all required applications.', name: 'HELIX_POST_DEPLOY_CONFIG'),
                    booleanParam(defaultValue: 'false', description: 'Select this option only in case of disaster recovery', name: 'HELIX_DR'),
                    booleanParam(defaultValue: 'false', description: 'Select this option to scale down pod in case of disaster recovery', name: 'SCALE_DOWN'),
                    booleanParam(defaultValue: 'false', description: 'Select this option to restart all application pods', name: 'HELIX_RESTART'),
                    //string(defaultValue: '', description: '', name: 'NOTIFYLIST', trim: true),
                    //string(defaultValue: '', description: 'Configuration file URL', name: 'CONFIG_FILE_URL', trim: true),
                    //separator(name: "SEPARATOR_CODE", sectionHeader: "OTHER_INPUT_PARAMS",sectionHeaderStyle: """background-color: #FAD7A0;text-align: center;padding: 4px;color: #343434;font-size: 22px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    separator(name: "SEPARATOR_CODE", sectionHeader: "DATABASE_REGISTRY_STORAGE_PASSWORDS_SECRETS_DETAILS",sectionHeaderStyle: """background-color: #FFF0CF;text-align: center;padding: 2px;color: #343434;font-size: 16px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    string(defaultValue: '', description: 'Provide value while performing UPDATE/UPGRADE. Leave it blank for FRESH deployment.', name: 'AR_ADMIN_USER', trim: true),
                    password(defaultValue: '', description: 'Provide value while performing UPDATE/UPGRADE. Leave it blank for FRESH deployment.', name: 'AR_ADMIN_PASSWORD'),
                    choice(choices: ['DTR','HARBOR','DTR_STG'], description: 'Select the Registry Type.', name: 'REGISTRY_TYPE'),
                    string(defaultValue: '', description: '', name: 'HARBOR_REGISTRY_HOST', trim: true),
                    string(defaultValue: '', description: '', name: 'IMAGE_REGISTRY_USERNAME', trim: true),
                    password(defaultValue: '', description: '', name: 'IMAGE_REGISTRY_PASSWORD'),
                    choice(choices: ['postgres', 'mssql', 'oracle'], description: '', name: 'DB_TYPE'),
					booleanParam(defaultValue: 'false', description: 'Applicable only for POSTGRES, select if encrypted DB connection is required', name: 'DB_SSL_ENABLED'),
                    //booleanParam(defaultValue: 'false', description: 'Applicable only for POSTGRES. Use this option if DB_SSL_ENABLED is selected.', name: 'DB_JDBC_URL'),
                    string(defaultValue: '', description: '', name: 'DB_JDBC_URL', trim: true),
                    string(defaultValue: '', description: '', name: 'DB_PORT', trim: true),
                    string(defaultValue: '', description: 'Provide only service name not SID', name: 'ORACLE_SERVICE_NAME', trim: true),
                    string(defaultValue: '', description: '', name: 'DATABASE_HOST_NAME', trim: true),
                    string(defaultValue: 'postgres', description: '', name: 'DATABASE_ADMIN_USER', trim: true),
                    password(defaultValue: '', description: '', name: 'DATABASE_ADMIN_PASSWORD'),
                    booleanParam(defaultValue: 'true', description: 'Unselect this if database restore is not required. Applicable for postgres DB only.', name: 'DATABASE_RESTORE'),
                    booleanParam(defaultValue: 'false', description: 'Select this if database is on HA cluster', name: 'IS_DATABASE_ALWAYS_ON'),
                    //choice(choices: ['Elastic', 'Classic'], description: 'If you are selecting type "Elastic", ensure ELASTICSEARCH_DEPLOY is selected under INFRA-DEPLOY section.', name: 'PLATFORM_FTS_TYPE'),
                    //string(defaultValue: '', description: 'If FTS_TYPE is "Elastic", this parameter can be ignored.', name: 'PLATFORM_FTS_VOLUME_CLAIM_TEMPLATE_STORAGE_CLASS', trim: true),
                    //string(defaultValue: '', description: '', name: 'ELASTICSEARCH_LOG_STORAGE_CLASS', trim: true),
                    //string(defaultValue: '', description: '', name: 'ELASTICSEARCH_FTS_STORAGE_CLASS', trim: true),
                    //string(defaultValue: '', description: 'Provide value considering it will be taken in Gigabytes, eg: 200. \nMin. recommended size is 200 Gigabytes', name: 'ES_LOGS_DATA_STORAGE_SIZE', trim: true),
                    //string(defaultValue: '', description: 'Provide value considering it will be taken in Gigabytes, eg: 200. \nMin. recommended size is 200 Gigabytes', name: 'ES_FTS_DATA_STORAGE_SIZE', trim: true),
                    //string(defaultValue: '', description: '', name: 'MIDTIER_USER_VOLUME_CLAIM_TEMPLATE_STORAGE_CLASS', trim: true),
                    //string(defaultValue: '', description: '', name: 'MIDTIER_INT_VOLUME_CLAIM_TEMPLATE_STORAGE_CLASS', trim: true),
                    string(defaultValue: '', description: '', name: 'LOGS_ELASTICSEARCH_HOSTNAME', trim: true),
                    booleanParam(defaultValue: 'false', description: 'Select this if TLS is on', name: 'LOGS_ELASTICSEARCH_TLS'),
                    password(defaultValue: '', description: '', name: 'LOGS_ELASTICSEARCH_PASSWORD'),
                    string(defaultValue: '', description: '', name: 'FTS_ELASTICSEARCH_HOSTNAME', trim: true),
                    string(defaultValue: '', description: '', name: 'FTS_ELASTICSEARCH_PORT', trim: true),
                    //string(defaultValue: '', description: '', name: 'FTS_ELASTICSEARCH_USERNAME', trim: true),
                    password(defaultValue: '', description: '', name: 'FTS_ELASTICSEARCH_USER_PASSWORD'),
                    booleanParam(defaultValue: 'true', description: 'Select this if ssl is enabled', name: 'FTS_ELASTICSEARCH_SECURE'),
                    string(defaultValue: '', description: 'supported locales are, "fr,de,it,es,ja,ko,zh_CN,pt_BR,he,ru,pl"', name: 'AR_LOCALE_TO_INSTALL', trim: true),
                    string(defaultValue: '', description: '', name: 'IMAGESECRET_NAME', trim: true),
                    password(defaultValue: '', description: '', name: 'BAKEDUSER_HANNAH_ADMIN_PASSWORD'),
                    string(defaultValue: '', description: '', name: 'AR_DB_NAME', trim: true),
                    string(defaultValue: '', description: '', name: 'AR_DB_USER', trim: true),
                    password(defaultValue: '', description: '', name: 'AR_DB_PASSWORD'),
                    password(defaultValue: '', description: '', name: 'AR_SERVER_APP_SERVICE_PASSWORD'),
                    password(defaultValue: '', description: '', name: 'AR_SERVER_DSO_USER_PASSWORD'),
                    password(defaultValue: '', description: '', name: 'AR_SERVER_MIDTIER_SERVICE_PASSWORD'),
                    //string(defaultValue: '', description: '', name: 'SMARTIT_DB_NAME', trim: true),
                    //string(defaultValue: '', description: '', name: 'SMARTIT_DB_USER_SYSTEM', trim: true),
                    //password(defaultValue: '', description: '', name: 'SMARTIT_DB_PASSWORD_SYSTEM'),
                    //string(defaultValue: '', description: '', name: 'SMARTIT_DB_USER_BUSINESS', trim: true),
                    //password(defaultValue: '', description: '', name: 'SMARTIT_DB_PASSWORD_BUSINESS'),
                    string(defaultValue: '', description: '', name: 'SMARTREPORTING_DB_NAME', trim: true),
                    string(defaultValue: '', description: '', name: 'SMARTREPORTING_DB_USER', trim: true),
                    password(defaultValue: '', description: '', name: 'SMARTREPORTING_DB_PASSWORD'),
                    string(defaultValue: '', description: '', name: 'VC_RKM_USER_NAME', trim: true),
                    password(defaultValue: '', description: '', name: 'VC_RKM_PASSWORD'),
                    string(defaultValue: '', description: '', name: 'VC_PROXY_USER_LOGIN_NAME', trim: true),
                    password(defaultValue: '', description: '', name: 'VC_PROXY_USER_PASSWORD'),
                    //string(defaultValue: '', description: '', name: 'OPENFIRE_DB_USER_NAME', trim: true),
                    //password(defaultValue: '', description: '', name: 'OPENFIRE_DB_USER_PASSWORD'),
                    string(defaultValue: '', description: '', name: 'DWP_CONFIG_PRIMARY_ORG_NAME', trim: true),
                    password(defaultValue: '', description: '', name: 'DWP_CONFIG_SUBTENANT_USER_PASSWORD'),
                    validatingString(defaultValue: 'onbmc-s', regex: '\\w+[\\w+\\W*\\w+].*', description: 'AR Server Alias Name', name: 'AR_SERVER_ALIAS', failedValidationMessage: 'Provide AR Server Alias'),
                    //string(defaultValue: 'onbmc-s', description: '', name: 'AR_SERVER_ALIAS', trim: true),
                    string(defaultValue: '', description: 'To enable external access, fill the external IPs in json list format, like "[10.168.xx.xx,10.168.xx.xx]', name: 'PLATFORM_ADMIN_PLATFORM_EXTERNAL_IPS', trim: true),
                    booleanParam(defaultValue: 'false', description: 'Select this checkbox to start Normalization service on platform-int pod', name: 'ENABLE_PLATFORM_INT_NORMALIZATION'),
                    booleanParam(defaultValue: 'false', description: 'Select this option to trigger full cache', name: 'MIDTIERCACHEBUILDER_TRIGGER_PRELOAD'),
                    string(defaultValue: '0 1 * * *', description: 'Specify a cronjob schedule for Midtier cache builder job. Default is 1 AM everyday.', name: 'MIDTIERCACHEBUILDER_SCHEDULE', trim: true),
                    separator(name: "SEPARATOR_CODE", sectionHeader: "RSSO_PARAMETERS",sectionHeaderStyle: """background-color: #FFF0CF;text-align: center;padding: 2px;color: #343434;font-size: 16px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    //string(defaultValue: '', description: '', name: 'RSSO_DB_HOSTNAME', trim: true),
                    //string(defaultValue: 'agni_rsso', description: '', name: 'RSSO_DB_NAME', trim: true),
                    //string(defaultValue: 'agni_rssoadmin', description: '', name: 'RSSO_DB_USER', trim: true),
                    //password(defaultValue: '', description: '', name: 'RSSO_DB_PASSWORD'),
                    string(defaultValue: '', description: '', name: 'RSSO_URL', trim: true),
                    string(defaultValue: '', description: '', name: 'RSSO_ADMIN_USER', trim: true),
                    password(defaultValue: '', description: '', name: 'RSSO_ADMIN_PASSWORD'),
                    string(defaultValue: '', description: 'Provide tenant domain identifier specified in rsso realm', name: 'TENANT_DOMAIN', trim: true),
                    separator(name: "SEPARATOR_CODE", sectionHeader: "ITSM INTEROPS PARAMETERS",sectionHeaderStyle: """background-color: #FFF0CF;text-align: center;padding: 2px;color: #343434;font-size: 16px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    string(defaultValue: '', description: '', name: 'HELIX_PLATFORM_DOMAIN', trim: true),
                    string(defaultValue: '', description: '', name: 'HELIX_PLATFORM_CLUSTER', trim: true),
                    string(defaultValue: '', description: '', name: 'HELIX_PLATFORM_NAMESPACE', trim: true),
                    // string(defaultValue: '', description: 'ITSM Insights Service ID', name: 'ITSM_INSIGHTS_SERVICEID', trim: true),
                    // string(defaultValue: '', description: 'Innovation Studio Service ID', name: 'IS_SERVICEID', trim: true),
                    // string(defaultValue: '', description: 'Smart IT Service ID', name: 'SMARTIT_SERVICEID', trim: true),
                    // string(defaultValue: '', description: 'BWF Service ID', name: 'BWF_SERVICEID', trim: true),
                    // string(defaultValue: '', description: 'DWP Service ID', name: 'DWP_SERVICEID', trim: true),
                    // string(defaultValue: '', description: 'DWPA Service ID', name: 'DWPA_SERVICEID', trim: true),
                    string(defaultValue: '', description: '', name: 'HELIX_PLATFORM_KUBECONFIG_CREDENTIAL', trim: true),
                    //string(defaultValue: '', description: '', name: 'TENANTNAME', trim: true),
                    string(defaultValue: '', description: '', name: 'HELIX_PLATFORM_CUSTOMER_NAME', trim: true),
                    //string(defaultValue: '', description: '', name: 'ADE_ENVIRONMENT', trim: true),
                    //string(defaultValue: '', description: '', name: 'ITSM_USER', trim: true),
                    //password(defaultValue: '', description: '', name: 'ITSM_PASSWORD'),
                    separator(name: "SEPARATOR_CODE", sectionHeader: "Select the services for interoperability configuration",sectionHeaderStyle: """background-color: #FFFCF4;text-align: center;padding: 1px;color: #343434;font-size: 12px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    booleanParam(defaultValue: 'true', description: '', name: 'BMC_HELIX_ITSM_INSIGHTS'),
                    booleanParam(defaultValue: 'true', description: '', name: 'BMC_HELIX_SMART_IT'),
                    booleanParam(defaultValue: 'true', description: '', name: 'BMC_HELIX_BWF'),
                    booleanParam(defaultValue: 'true', description: '', name: 'BMC_HELIX_DWP'),
                    booleanParam(defaultValue: 'true', description: '', name: 'BMC_HELIX_INNOVATION_STUDIO'),
                    booleanParam(defaultValue: 'true', description: '', name: 'BMC_HELIX_DWPA'),
                    //separator(name: "SEPARATOR_CODE", sectionHeader: "POST DEPLOY CLEANUP",sectionHeaderStyle: """background-color: #FFF0CF;text-align: center;padding: 2px;color: #343434;font-size: 16px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    //booleanParam(defaultValue: 'false', description: 'Check this to cleanup of env config file, postDeploy', name: 'ENV_CONFIGFILE_CLEANUP')
					separator(name: "SEPARATOR_CODE", sectionHeader: "Splunk Configuration Details",sectionHeaderStyle: """background-color: #FFFCF4;text-align: center;padding: 1px;color: #343434;font-size: 12px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;"""),
                    booleanParam(defaultValue: 'false', description: 'Select this parameter only when sidecar fluent type is Splunk.', name: 'SIDECAR_FLUENT_OUTPUT_TYPE_SPLUNK'),
                    string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_HOSTNAME', trim: true),
                    string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_PORT', trim: true),
                    string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_OUTPUT_CUSTOM', trim: true),
                    //booleanParam(defaultValue: 'false', description: '', name: 'SIDECAR_FLUENT_DETAIL_LOG'),
                    string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_TOKEN', trim: true),
                    //string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_COMPRESS', trim: true),
                    //string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_CHANNEL', trim: true),
                    //string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_SEND_RAW', trim: true),
                    //string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_EVENT_KEY', trim: true),
                    //string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_EVENT_INDEX', trim: true),
                    //string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_EVENT_FIELD', trim: true),
                    //string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_EVENT_SOURCE', trim: true),
                    //string(defaultValue: '', description: '', name: 'SIDECAR_FLUENT_SPLUNK_EVENT_SOURCETYPE', trim: true)
                ]
            )
        ]
    )

    timeout(1080){
        env.VERSION="master"
        env.ENVIONMENTS_REPO="${CUSTOMER_CONFIGS}"
        env.CURRENT_BRANCH="${VERSION}"
        env.TARGET_VERSION="${PLATFORM_HELM_VERSION}"
                                 
                                                            
        def DEPLOYMENT_TYPE="FRESH"
        //if("${SERVICE_MODE}" == "true"){
        //    DEPLOYMENT_TYPE="SERVICE" 
        //}
        if("${DEPLOYMENT_MODE}" == "UPDATE"){
            DEPLOYMENT_TYPE="UPDATE"
        }
        if("${DEPLOYMENT_MODE}" == "UPGRADE"){
            DEPLOYMENT_TYPE="UPGRADE"
        }
        if("${DEPLOYMENT_MODE}" == "SERVICE"){
            DEPLOYMENT_TYPE="SERVICE"
        }
        def IS_HELM3="true"
        def HELIX_REMEDY="true"	 
        //def HELIX_DWP="true"
        //def HELIX_DWPA="true"
        //def HELIX_BWF="true"
        //def HELIX_MCSM="true"
        //def HELIX_ITSM_INSIGHT ="true" 
        def CONFIG_FILE_URL=null
        if("${PLATFORM_HELM_VERSION}" ==~ /2022.*/){env.PLAYBOOKS_REPO_VERSION="22100-maint"}
        if("${PLATFORM_HELM_VERSION}" ==~ /2021.*/){env.PLAYBOOKS_REPO_VERSION="213000-maint"}
        //env.PLAYBOOKS_REPO_VERSION="213000-maint"
        env.SMARTREPORTING_PLAYBOOKS_REPO_VERSION="10R"
		env.LOCAL_GIT="true" 
         
        mergedParams = mergeConfigFileWithParameters("${CONFIG_FILE_URL}")
        def KEEP_INPUTFILE_INLINE_WITH_TEMPLATE="true"
        env.VALIDATE_RSSO="true"
        passwordchk()

        node("${AGENT}"){
            env.CUSTOMER_FILE="${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}.sh"
            

            try{
                    setPipelineProperties()
                    startStage("${PIPELINE_NAME}","${PIPELINE_TYPE}");
                    currentBuild.displayName="${mergedParams.CLUSTER}-${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}-${env.BUILD_NUMBER}"

                    set_git_global_config()
                    stage("Checkout Code "){
                            log.info("START(Checkout):========================================================================")

                            if("${LOCAL_GIT}" == "true")
                            {
                            withCredentials([usernamePassword(credentialsId: "${CHECKOUT_USING_USER}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                            sh'''
                            ###########################################################################################################################################
                            ### if following commands are run manually, please make sure all environment variables (e.g. WORKSPACE, GIT_USERNAME) are set properly ###
                            ###########################################################################################################################################

                            rm -rf ${WORKSPACE}/* ${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_PLATFORM_DEPLOY/remedy/Playbooks/*
                            REPO_URL()
                            {   
                                REPO=$1
                                rm -rf $(basename $REPO)
                                REPO_URL=$(echo $REPO | awk -v GIT_USERNAME=$GIT_USERNAME -v GIT_PASSWORD=$GIT_PASSWORD -F"\\/\\/" \'{print $1 "//" GIT_USERNAME ":" GIT_PASSWORD "@" $2}\')
                                echo ${REPO_URL}
                                git clone $REPO_URL
                                
                            }
                            REPO_URL ${DEVOPS_REPO}
                            cp -R ${WORKSPACE}/$(echo $(basename ${DEVOPS_REPO}) |cut -d'.' -f 1)/* .
                            mkdir -p ${WORKSPACE}/environments	
                            cd ${WORKSPACE}/environments
                            REPO_URL ${CUSTOMER_CONFIGS}
                            #mkdir -p /jenkinsnfs/ANSIBLE_PLAYBOOKS/HELIX_PLATFORM_DEPLOY/remedy/Playbooks
                            mkdir -p ${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_PLATFORM_DEPLOY/remedy/Playbooks
                            #cd /jenkinsnfs/ANSIBLE_PLAYBOOKS/HELIX_PLATFORM_DEPLOY/remedy/Playbooks
                            cd ${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_PLATFORM_DEPLOY/remedy/Playbooks
                            PLAYBOOKS_REPO=$(echo $PLAYBOOKS_REPO | awk -v GIT_USERNAME=$GIT_USERNAME -v GIT_PASSWORD=$GIT_PASSWORD -F"\\/\\/" \'{print $1 "//" GIT_USERNAME ":" GIT_PASSWORD "@" $2}\')
                            git clone -b ${PLAYBOOKS_REPO_VERSION} ${PLAYBOOKS_REPO}
                            cp -R $(echo $(basename ${PLAYBOOKS_REPO}) |cut -d'.' -f 1)/* .
                            #mkdir -p ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/staging/configmapfiles/certs/
                            #cp ${WORKSPACE}/pipeline/tasks/cacerts /${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/staging/configmapfiles/certs/
                            '''
                            }
                            }
                            else{
                                checkoutRepos();
                            }
                    }

                    stage("Copy Customer Certs"){
                        copycustomcerts()
                    }

                    stage("Generate Input Configuration File"){
                    log.info("START of STAGE ========================================================================")
                    if("${INPUT_CONFIG_METHOD}" == "Generate_Input_File")
                    {
                        if("${HELIX_GENERATE_CONFIG}" == "true")
                        {
                                                                                                                                                
                            log.info("START(HELIX_GENERATE_CONFIG):========================================================================")
                            def result = build job: 'HELIX_GENERATE_CONFIG', parameters: [
                                string(name: 'AGENT', value: "${AGENT}"),
                                //booleanParam(name: 'LOCAL_GIT', value: "${mergedParams.LOCAL_GIT}"),
								booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                booleanParam(name: 'CUSTOM_BINARY_PATH', value: "${mergedParams.CUSTOM_BINARY_PATH}"),
                                string(name: 'GIT_USER_HOME_DIR', value: "${GIT_USER_HOME_DIR}"),
                                string(name: 'CHECKOUT_USING_USER', value: "${CHECKOUT_USING_USER}"),
                                string(name: 'KUBECONFIG_CREDENTIAL', value: "${KUBECONFIG_CREDENTIAL}"),
                                string(name: 'DEVOPS_REPO', value: "${DEVOPS_REPO}"),
                                string(name: 'CUSTOMER_CONFIGS', value: "${CUSTOMER_CONFIGS}"),
                                string(name: 'DEPLOYMENT_TYPE', value: "${DEPLOYMENT_TYPE}"),																 
                                string(name: 'VERSION', value: "${VERSION}"),
                                string(name: 'CLUSTER', value: "${mergedParams.CLUSTER}"),
                                string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_NAME}"),
                                string(name: 'IS_NAMESPACE', value: "${mergedParams.IS_NAMESPACE}"),
                                string(name: 'CUSTOMER_SERVICE', value: "${mergedParams.CUSTOMER_SERVICE}"),
                                string(name: 'ENVIRONMENT', value: "${mergedParams.ENVIRONMENT}"),
                                string(name: 'CUSTOMER_SIZE', value: "${mergedParams.CUSTOMER_SIZE}"),
                                password(name: 'CACERTS_SSL_TRUSTSTORE_PASSWORD', value: "${mergedParams.CACERTS_SSL_TRUSTSTORE_PASSWORD}"),
                                //string(name: 'input_parameter', value: "TARGET_VERSION=${TARGET_VERSION},SMARTAPPS_HELM_VERSION=${SMARTAPPS_HELM_VERSION},HELIX_REMEDY=${HELIX_REMEDY},HELIX_DWP=${HELIX_DWP},HELIX_DWPA=${HELIX_DWPA},HELIX_BWF=${HELIX_BWF},HELIX_MCSM=${HELIX_MCSM},HELIX_ITSM_INSIGHT=${HELIX_ITSM_INSIGHT},BLUEMIX_HELIX_COGNITIVE_CHATBOT=${BLUEMIX_HELIX_COGNITIVE_CHATBOT},BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN=${BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN},BLUEMIX_HELIX_COGNITIVE_AUTOMATION=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION},BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN},BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN},BLUEMIX_HELIX_COGNITIVE_SEARCH=${BLUEMIX_HELIX_COGNITIVE_SEARCH},BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN=${BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN},CUSTOMER_SIZE=${CUSTOMER_SIZE}"),
                                string(name: 'input_parameter', value: "SOURCE_VERSION=${SOURCE_VERSION},TARGET_VERSION=${TARGET_VERSION},SMARTAPPS_HELM_VERSION=${SMARTAPPS_HELM_VERSION},HELIX_REMEDY=${HELIX_REMEDY},HELIX_DWP=${HELIX_DWP},HELIX_DWPA=${HELIX_DWPA},HELIX_MCSM=${HELIX_MCSM},HELIX_ITSM_INSIGHT=${HELIX_ITSM_INSIGHTS},CUSTOMER_SIZE=${CUSTOMER_SIZE}"),
                                string(name: 'SMARTREPORTING_SOURCE_VERSION', value: "${mergedParams.SMARTREPORTING_SOURCE_VERSION}"),
                                string(name: 'PLATFORM_HELM_VERSION', value: "${mergedParams.PLATFORM_HELM_VERSION}"),
                                string(name: 'DEPLOYMENT_MODE', value: "${mergedParams.DEPLOYMENT_MODE}"),
                                booleanParam(name: 'HELIX_SMARTREPORT', value: "${mergedParams.HELIX_SMARTREPORTING_DEPLOY}"),
                                booleanParam(name: 'HELIX_REMEDY', value: true),
                                booleanParam(name: 'HELIX_OPENFIRE', value: "${mergedParams.HELIX_OPENFIRE}"),
                                booleanParam(name: 'HELIX_VIRTUALCHAT', value: "${mergedParams.HELIX_VIRTUALCHAT}"),
                                booleanParam(name: 'HELIX_DWP', value: "${mergedParams.HELIX_DWP}"),
                                booleanParam(name: 'HELIX_DWPA', value: "${mergedParams.HELIX_DWPA}"),
                                booleanParam(name: 'HELIX_BWF', value: "${mergedParams.HELIX_BWF}"),
                                booleanParam(name: 'HELIX_MCSM', value: "${mergedParams.HELIX_MCSM}"),
                                booleanParam(name: 'HELIX_ITSM_INSIGHT', value: "${mergedParams.HELIX_ITSM_INSIGHTS}"),
                                booleanParam(name: 'HELIX_TSOMPLUGIN', value: "${mergedParams.HELIX_TSOMPLUGIN}"),
                                //booleanParam(name: 'HELIX_SMARTAPPS_TELCO', value: "${mergedParams.HELIX_SMARTAPPS_TELCO}"),
                                booleanParam(name: 'HELIX_SMARTAPPS_CSM', value: "${mergedParams.HELIX_SMARTAPPS_CSM}"),
                                booleanParam(name: 'HELIX_SMARTAPPS_FAS', value: "${mergedParams.HELIX_SMARTAPPS_FAS}"),
                                booleanParam(name: 'HELIX_DRIFTMANAGEMENTPLUGIN', value: "${mergedParams.HELIX_DRIFTMANAGEMENTPLUGIN}"),
                                //booleanParam(name: 'HELIX_SCCM', value: "${mergedParams.HELIX_SCCM}"),
                                //booleanParam(name: 'HELIX_BCM', value: "${mergedParams.HELIX_BCM}"),
                                // booleanParam(name: 'BLUEMIX_HELIX_COGNITIVE_CHATBOT', value: "${mergedParams.BLUEMIX_HELIX_COGNITIVE_CHATBOT}"),
                                // string(name: 'BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN', value: "${mergedParams.BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN}"),
                                // booleanParam(name: 'BLUEMIX_HELIX_COGNITIVE_AUTOMATION', value: "${mergedParams.BLUEMIX_HELIX_COGNITIVE_AUTOMATION}"),
                                // string(name: 'BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN', value: "${mergedParams.BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN}"),
                                // string(name: 'BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN', value: "${mergedParams.BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN}"),
                                // booleanParam(name: 'BLUEMIX_HELIX_COGNITIVE_SEARCH', value: "${mergedParams.BLUEMIX_HELIX_COGNITIVE_SEARCH}"),
                                // string(name: 'BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN', value: "${mergedParams.BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN}"),
                                string(name: 'INGRESS_CLASS', value: "${mergedParams.INGRESS_CLASS}"),
                                string(name: 'CLUSTER_DOMAIN', value: "${mergedParams.CLUSTER_DOMAIN}"),
                                booleanParam(name: 'ROUTE_ENABLED', value: "${mergedParams.ROUTE_ENABLED}"),
                                booleanParam(name: 'ROUTE_TLS_ENABLED', value: "${mergedParams.ROUTE_TLS_ENABLED}"),
                                booleanParam(name: 'OS_RESTRICTED_SCC', value: "${mergedParams.OS_RESTRICTED_SCC}"),
                                booleanParam(name: 'SIDECAR_FLUENTBIT', value: "${mergedParams.SIDECAR_FLUENTBIT}"),
                                booleanParam(name: 'SIDECAR_SUPPORT_ASSISTANT', value: "${mergedParams.SIDECAR_SUPPORT_ASSISTANT_FPACK}"),
                                booleanParam(name: 'IS_CLOUD', value: "${mergedParams.IS_CLOUD}"),
                                string(name: 'AR_ADMIN_USER', value: "${mergedParams.AR_ADMIN_USER}"),
                                password(name: 'AR_ADMIN_PASSWORD', value: "${mergedParams.AR_ADMIN_PASSWORD}"),
                                string(name: 'REGISTRY_TYPE', value: "${mergedParams.REGISTRY_TYPE}"),
                                string(name: 'HARBOR_REGISTRY_HOST', value: "${mergedParams.HARBOR_REGISTRY_HOST}"),
                                string(name: 'IMAGE_REGISTRY_USERNAME', value: "${mergedParams.IMAGE_REGISTRY_USERNAME}"),
                                password(name: 'IMAGE_REGISTRY_PASSWORD', value: "${mergedParams.IMAGE_REGISTRY_PASSWORD}"),
                                string(name: 'DB_TYPE', value: "${mergedParams.DB_TYPE}"),
								booleanParam(name: 'DB_SSL_ENABLED', value: "${mergedParams.DB_SSL_ENABLED}"),
                                //booleanParam(name: 'DB_JDBC_URL', value: "${mergedParams.DB_JDBC_URL}"),
                                string(name: 'DB_JDBC_URL', value: "${mergedParams.DB_JDBC_URL}"),
                                string(name: 'DB_PORT', value: "${mergedParams.DB_PORT}"),
                                string(name: 'ORACLE_SERVICE_NAME', value: "${mergedParams.ORACLE_SERVICE_NAME}"),
                                string(name: 'DATABASE_HOST_NAME', value: "${mergedParams.DATABASE_HOST_NAME}"),
                                string(name: 'DATABASE_ADMIN_USER', value: "${mergedParams.DATABASE_ADMIN_USER}"),
                                password(name: 'DATABASE_ADMIN_PASSWORD', value: "${mergedParams.DATABASE_ADMIN_PASSWORD}"),
                                booleanParam(name: 'DATABASE_RESTORE', value: "${mergedParams.DATABASE_RESTORE}"),
                                booleanParam(name: 'IS_DATABASE_ALWAYS_ON', value: "${mergedParams.IS_DATABASE_ALWAYS_ON}"),
                                string(name: 'HELM_NODE', value: "${mergedParams.HELM_NODE}"),
                                string(name: 'HELM_REPO', value: "${mergedParams.HELM_REPO}"),
                                string(name: 'SMARTREPORTING_HELM_REPO', value: "${mergedParams.SMARTREPORTING_HELM_REPO}"),
                                string(name: 'SMARTAPPS_HELM_REPO', value: "${mergedParams.SMARTAPPS_HELM_REPO}"),
                                //string(name: 'PLATFORM_FTS_TYPE', value: "${mergedParams.PLATFORM_FTS_TYPE}"),
                                //string(name: 'PLATFORM_FTS_VOLUME_CLAIM_TEMPLATE_STORAGE_CLASS', value: "${mergedParams.PLATFORM_FTS_VOLUME_CLAIM_TEMPLATE_STORAGE_CLASS}"),
                                //string(name: 'ELASTICSEARCH_LOG_STORAGE_CLASS', value: "${mergedParams.ELASTICSEARCH_LOG_STORAGE_CLASS}"),
                                //string(name: 'ELASTICSEARCH_FTS_STORAGE_CLASS', value: "${mergedParams.ELASTICSEARCH_FTS_STORAGE_CLASS}"),
                                //string(name: 'ES_LOGS_DATA_STORAGE_SIZE', value: "${mergedParams.ES_LOGS_DATA_STORAGE_SIZE}"),
                                //string(name: 'ES_FTS_DATA_STORAGE_SIZE', value: "${mergedParams.ES_FTS_DATA_STORAGE_SIZE}"),
                                //string(name: 'MIDTIER_USER_VOLUME_CLAIM_TEMPLATE_STORAGE_CLASS', value: "${mergedParams.MIDTIER_USER_VOLUME_CLAIM_TEMPLATE_STORAGE_CLASS}"),
                                //string(name: 'MIDTIER_INT_VOLUME_CLAIM_TEMPLATE_STORAGE_CLASS', value: "${mergedParams.MIDTIER_INT_VOLUME_CLAIM_TEMPLATE_STORAGE_CLASS}"),
                                string(name: 'LOGS_ELASTICSEARCH_HOSTNAME', value: "${mergedParams.LOGS_ELASTICSEARCH_HOSTNAME}"),
                                booleanParam(name: 'LOGS_ELASTICSEARCH_TLS', value: "${mergedParams.LOGS_ELASTICSEARCH_TLS}"),
                                password(name: 'LOGS_ELASTICSEARCH_PASSWORD', value: "${mergedParams.LOGS_ELASTICSEARCH_PASSWORD}"),
                                string(name: 'FTS_ELASTICSEARCH_HOSTNAME', value: "${mergedParams.FTS_ELASTICSEARCH_HOSTNAME}"),
                                string(name: 'FTS_ELASTICSEARCH_PORT', value: "${mergedParams.FTS_ELASTICSEARCH_PORT}"),
                                //string(name: 'FTS_ELASTICSEARCH_USERNAME', value: "${mergedParams.FTS_ELASTICSEARCH_USERNAME}"),
                                password(name: 'FTS_ELASTICSEARCH_USER_PASSWORD', value: "${mergedParams.FTS_ELASTICSEARCH_USER_PASSWORD}"),
                                booleanParam(name: 'FTS_ELASTICSEARCH_SECURE', value: "${mergedParams.FTS_ELASTICSEARCH_SECURE}"),
                                password(name: 'BAKEDUSER_HANNAH_ADMIN_PASSWORD', value: "${mergedParams.BAKEDUSER_HANNAH_ADMIN_PASSWORD}"),
                                string(name: 'AR_LOCALE_TO_INSTALL', value: "${mergedParams.AR_LOCALE_TO_INSTALL}"),
                                string(name: 'IMAGESECRET_NAME', value: "${mergedParams.IMAGESECRET_NAME}"),
                                //booleanParam(name: 'COMPACT_DEPLOYMENT', value: "${mergedParams.COMPACT_DEPLOYMENT}"),
                                string(name: 'AR_DB_NAME', value: "${mergedParams.AR_DB_NAME}"),
                                string(name: 'AR_DB_USER', value: "${mergedParams.AR_DB_USER}"),
                                password(name: 'AR_DB_PASSWORD', value: "${mergedParams.AR_DB_PASSWORD}"),
                                password(name: 'AR_SERVER_APP_SERVICE_PASSWORD', value: "${mergedParams.AR_SERVER_APP_SERVICE_PASSWORD}"),
                                password(name: 'AR_SERVER_DSO_USER_PASSWORD', value: "${mergedParams.AR_SERVER_DSO_USER_PASSWORD}"),
                                password(name: 'AR_SERVER_MIDTIER_SERVICE_PASSWORD', value: "${mergedParams.AR_SERVER_MIDTIER_SERVICE_PASSWORD}"),
                                //string(name: 'SMARTIT_DB_NAME', value: "${mergedParams.SMARTIT_DB_NAME}"),
                                //string(name: 'SMARTIT_DB_USER_SYSTEM', value: "${mergedParams.SMARTIT_DB_USER_SYSTEM}"),
                                //password(name: 'SMARTIT_DB_PASSWORD_SYSTEM', value: "${mergedParams.SMARTIT_DB_PASSWORD_SYSTEM}"),
                                //string(name: 'SMARTIT_DB_USER_BUSINESS', value: "${mergedParams.SMARTIT_DB_USER_BUSINESS}"),
                                //password(name: 'SMARTIT_DB_PASSWORD_BUSINESS', value: "${mergedParams.SMARTIT_DB_PASSWORD_BUSINESS}"),
                                string(name: 'SMARTREPORTING_DB_NAME', value: "${mergedParams.SMARTREPORTING_DB_NAME}"),
                                string(name: 'SMARTREPORTING_DB_USER', value: "${mergedParams.SMARTREPORTING_DB_USER}"),
                                password(name: 'SMARTREPORTING_DB_PASSWORD', value: "${mergedParams.SMARTREPORTING_DB_PASSWORD}"),
                                string(name: 'VC_RKM_USER_NAME', value: "${mergedParams.VC_RKM_USER_NAME}"),
                                password(name: 'VC_RKM_PASSWORD', value: "${mergedParams.VC_RKM_PASSWORD}"),
                                string(name: 'VC_PROXY_USER_LOGIN_NAME', value: "${mergedParams.VC_PROXY_USER_LOGIN_NAME}"),
                                password(name: 'VC_PROXY_USER_PASSWORD', value: "${mergedParams.VC_PROXY_USER_PASSWORD}"),
                                //string(name: 'OPENFIRE_DB_USER_NAME', value: "${mergedParams.OPENFIRE_DB_USER_NAME}"),
                                //password(name: 'OPENFIRE_DB_USER_PASSWORD', value: "${mergedParams.OPENFIRE_DB_USER_PASSWORD}"),
                                string(name: 'DWP_CONFIG_PRIMARY_ORG_NAME', value: "${mergedParams.DWP_CONFIG_PRIMARY_ORG_NAME}"),
                                password(name: 'DWP_CONFIG_SUBTENANT_USER_PASSWORD', value: "${mergedParams.DWP_CONFIG_SUBTENANT_USER_PASSWORD}"),
                                string(name: 'AR_SERVER_ALIAS', value: "${mergedParams.AR_SERVER_ALIAS}"),
                                string(name: 'PLATFORM_ADMIN_PLATFORM_EXTERNAL_IPS', value: "${mergedParams.PLATFORM_ADMIN_PLATFORM_EXTERNAL_IPS}"),
                                booleanParam(name: 'ENABLE_PLATFORM_INT_NORMALIZATION', value: "${mergedParams.ENABLE_PLATFORM_INT_NORMALIZATION}"),
                                booleanParam(name: 'MIDTIERCACHEBUILDER_TRIGGER_PRELOAD', value: "${mergedParams.MIDTIERCACHEBUILDER_TRIGGER_PRELOAD}"),
                                string(name: 'MIDTIERCACHEBUILDER_SCHEDULE', value: "${mergedParams.MIDTIERCACHEBUILDER_SCHEDULE}"),
                                string(name: 'RSSO_DB_HOSTNAME', value: "${mergedParams.RSSO_DB_HOSTNAME}"),
                                string(name: 'RSSO_DB_NAME', value: "${mergedParams.RSSO_DB_NAME}"),
                                string(name: 'RSSO_DB_USER', value: "${mergedParams.RSSO_DB_USER}"),
                                password(name: 'RSSO_DB_PASSWORD', value: "${mergedParams.RSSO_DB_PASSWORD}"),
                                string(name: 'RSSO_URL', value: "${mergedParams.RSSO_URL}"),
                                string(name: 'RSSO_ADMIN_USER', value: "${mergedParams.RSSO_ADMIN_USER}"),
                                password(name: 'RSSO_ADMIN_PASSWORD', value: "${mergedParams.RSSO_ADMIN_PASSWORD}"),
                                string(name: 'TENANT_DOMAIN', value: "${mergedParams.TENANT_DOMAIN}"),
                                booleanParam(name: 'GENERATE_INPUT', value: "true"),
                                //booleanParam(name: 'GENERATE_PASSWORDS', value: "false"),
                                booleanParam(name: 'CHECKIN_INPUT_FILE', value: "true"),
                                booleanParam(name: 'SIDECAR_FLUENT_OUTPUT_TYPE_SPLUNK', value: "${mergedParams.SIDECAR_FLUENT_OUTPUT_TYPE_SPLUNK}"),
                                string(name: 'SIDECAR_FLUENT_SPLUNK_HOSTNAME', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_HOSTNAME}"),
                                string(name: 'SIDECAR_FLUENT_SPLUNK_PORT', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_PORT}"),
                                string(name: 'SIDECAR_FLUENT_OUTPUT_CUSTOM', value: "${mergedParams.SIDECAR_FLUENT_OUTPUT_CUSTOM}"),
                                booleanParam(name: 'SIDECAR_FLUENT_DETAIL_LOG', value: "${mergedParams.SIDECAR_FLUENT_DETAIL_LOG}"),
                                string(name: 'SIDECAR_FLUENT_SPLUNK_TOKEN', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_TOKEN}"),
                                //string(name: 'SIDECAR_FLUENT_SPLUNK_COMPRESS', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_COMPRESS}"),
                                //string(name: 'SIDECAR_FLUENT_SPLUNK_CHANNEL', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_CHANNEL}"),
                                //string(name: 'SIDECAR_FLUENT_SPLUNK_SEND_RAW', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_SEND_RAW}"),
                                //string(name: 'SIDECAR_FLUENT_SPLUNK_EVENT_KEY', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_EVENT_KEY}"),
                                //string(name: 'SIDECAR_FLUENT_SPLUNK_EVENT_INDEX', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_EVENT_INDEX}"),
                                //string(name: 'SIDECAR_FLUENT_SPLUNK_EVENT_FIELD', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_EVENT_FIELD}"),
                                //string(name: 'SIDECAR_FLUENT_SPLUNK_EVENT_SOURCE', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_EVENT_SOURCE}"),
                                //string(name: 'SIDECAR_FLUENT_SPLUNK_EVENT_SOURCETYPE', value: "${mergedParams.SIDECAR_FLUENT_SPLUNK_EVENT_SOURCETYPE}")
                                //string(name: 'NOTIFYLIST', value: "${mergedParams.NOTIFYLIST}")
                            ]
                            println result.getRawBuild().getLog()
                            log.info("END(HELIX_GENERATE_CONFIG):==========================================================================")
                        }else{
                            //log.info("START(HELIX_GENERATE_CONFIG):========================================================================")
                            log.info("SKIPPING STAGE HELIX_GENERATE_CONFIG")
                            //log.info("END(HELIX_GENERATE_CONFIG):==========================================================================")
                        
                        }
                    
                    
                    }
                    
                

                    if("${INPUT_CONFIG_METHOD}" == "Manual_Input_File")
                    {
                        log.info("Copying INPUT FILE========================================================================")
                        unstashParam "INPUT_CONFIG_FILE"

                        // try{
                        //     file("${INPUT_CONFIG_FILE}"){
                        //     unstashParam "INPUT_CONFIG_FILE"
                            
                        //     }
                        // }
                        // catch(Exception e2)
                        //     {
                        //         println 'Please Provide Input Customer File To Continue'
                        //     }
                        connectClusters("${CLUSTER}", "${KUBECONFIG_CREDENTIAL}");
                        sh '''
                            set +x
                            mkdir -p /tmp
                            cp "${INPUT_CONFIG_FILE}" "/tmp/InputFile"
                            dos2unix /tmp/InputFile
                            echo "INPUTFILE: " $INPUT_CONFIG_FILE
                        '''
                        log.info("START(UPLOADING INPUT FILE):========================================================================")
                        secretCreate()
                        if("${LOCAL_GIT}"=="true"){

                            uploadManualFile_local()
                        }else{
                            uploadManualFile_github()
                        }
                        log.info("END(UPLOADING INPUT FILE):========================================================================")
                    }
                        
                    // stage("Helix Pre Install Checks"){
                    //     if("${PREINSTALL_CHECKS}" == "true")
                    //     {
                    //         log.info("START(Helix Pre Install Checks):========================================================================")
                    //         if("${LOCAL_GIT}"=="false"){
                    //             if("${INPUT_CONFIG_METHOD}" == "Manual_Input_File"){
                    //                 println 'Skipping re checkout of customer_config repo as manual_input_file method places latest input file in this workspace already.'
                    //             }
                    //             else{
                    //                 dir("environments"){
                    //                 checkOut("${CUSTOMER_CONFIGS}","master","${CHECKOUT_USING_USER}")
                    //                 }
                    //             }
                                
                    //         }
                    //         else{
                    //             if("${INPUT_CONFIG_METHOD}" == "Manual_Input_File"){
                    //                 println 'Skipping re checkout of customer_config repo as manual_input_file method places latest input file in this workspace already.'
                    //             }
                    //             else{
                    //                 withCredentials([usernamePassword(credentialsId: "${CHECKOUT_USING_USER}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    //                 sh'''
                    //                     mkdir -p ${WORKSPACE}/environments
                    //                     rm -rf ${WORKSPACE}/environments/*
                    //                     CUSTOMER_CONFIGS=$(echo $CUSTOMER_CONFIGS | awk -v GIT_USERNAME=$GIT_USERNAME -v GIT_PASSWORD=$GIT_PASSWORD -F"\\/\\/" \'{print $1 "//" GIT_USERNAME ":" GIT_PASSWORD "@" $2}\')
                    //                     git clone ${CUSTOMER_CONFIGS}
                    //                     cp -R ${WORKSPACE}/$(echo $(basename ${CUSTOMER_CONFIGS}) |cut -d'.' -f 1)/* ${WORKSPACE}/environments
                    //                 '''
                    //                 }
                    //             }
                    //         }								
                    //         connectClusters("${CLUSTER}", "${KUBECONFIG_CREDENTIAL}")
                    //         sh'''
                    //         export KUBECTL_BIN=`which kubectl`
                    //         export HELM_BIN=`which helm`
                    //         #export KUBECTL_BIN="/usr/bin/kubectl"
                    //         #export HELM_BIN="/usr/local/bin/helm"
                    //         dos2unix ${CUSTOMER_FILE}
                    //         bash $WORKSPACE/infra/preinstall.sh ${CUSTOMER_FILE}
                    //         '''
                    //         log.info("END(Helix Pre Install Checks):==========================================================================")
                    //     }else{
                    //         log.info("START(Helix Pre Install Checks):========================================================================")
                    //         log.info("SKIPPING STAGE Helix Pre Install Checks")
                    //         log.info("END(Helix Pre Install Checks):==========================================================================")
                    //     }
                    // }

                    // stage("Helix Deploy RSSO"){
                    
                    //     if("${RSSO_DEPLOY}" == "true")
                    //     { 
                    //         log.info("START(Helix Deploy RSSO):========================================================================")
                    //         def result = build job: 'HELIX_RSSO_DEPLOY', parameters: [
                    //             string(name: 'RSSO_GITREPO', value: "${params.DEVOPS_REPO}"),
                    //             string(name: 'CUSTOMER_CONFIG_REPO', value: "${params.CUSTOMER_CONFIGS}"),
                    //             string(name: 'AGENT', value: "${params.AGENT}"),
                    //             string(name: 'CHECKOUT_USING_USER', value: "${params.CHECKOUT_USING_USER}"),
                    //             string(name: 'CUSTOMER_SERVICE', value: "${params.CUSTOMER_SERVICE}"),
                    //             string(name: 'ENVIRONMENT', value: "${params.ENVIRONMENT}"),
                    //             booleanParam(name: 'LOCAL_GIT', value: "${mergedParams.LOCAL_GIT}")
                    //         ]
                    //         log.info("END(Helix Deploy RSSO):==========================================================================")
                    //     }else{
                    //         log.info("START(Helix Deploy RSSO):========================================================================")
                    //         log.info("SKIPPING STAGE Helix Deploy RSSO")
                    //         log.info("END(Helix Deploy RSSO):==========================================================================")
                    //     }
                    
                    // }

                    // if("${FLUENTBIT_DEPLOY}" == "true"){
                    //     helix_fluentbit_deploy()
                    //     }

                    

                    stage('Keep Input File inline with Template'){
                        if("${INPUT_CONFIG_METHOD}"=="Generate_Input_File" && "${KEEP_INPUTFILE_INLINE_WITH_TEMPLATE}" == "true"){
                            if("${LOCAL_GIT}"=="false"){
                                updateinputfile_notlocalgit()
                                    
                                // sh'''                             
                                // rm -rf ${WORKSPACE}/environments/*
                                // #cd ${WORKSPACE}/environments
                                // '''
                                // dir("environments"){
                                // checkOut("${CUSTOMER_CONFIGS}","master","${CHECKOUT_USING_USER}")
                                // }
                                // withCredentials([usernamePassword(credentialsId: "${CHECKOUT_USING_USER}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                                // sh'''
                                // . ${WORKSPACE}/pipeline/vars/common-environment.vars
                                // cd ${WORKSPACE}/environments
                                // echo ${CUSTOMER_SERVICE}
                                // echo ${ENVIRONMENT}
                                
                                // customer_file=${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}.sh
                                // cp ${customer_file} ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}_bk.sh
                                // playbook_template_file=${WORKSPACE}/environments/Template.sh
                                // input_parameter="TARGET_VERSION=${TARGET_VERSION},SMARTAPPS_HELM_VERSION=${SMARTAPPS_HELM_VERSION},HELIX_REMEDY=${HELIX_REMEDY},HELIX_DWP=${HELIX_DWP},HELIX_DWPA=${HELIX_DWPA},HELIX_BWF=${HELIX_BWF},HELIX_MCSM=${HELIX_MCSM},HELIX_ITSM_INSIGHT=${HELIX_ITSM_INSIGHTS},BLUEMIX_HELIX_COGNITIVE_CHATBOT=${BLUEMIX_HELIX_COGNITIVE_CHATBOT},BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN=${BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN},BLUEMIX_HELIX_COGNITIVE_AUTOMATION=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION},BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN},BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN},BLUEMIX_HELIX_COGNITIVE_SEARCH=${BLUEMIX_HELIX_COGNITIVE_SEARCH},BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN=${BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN},LICENSE_REMEDY_SERVICE_MANAGEMENT_SUITE_CONCURRENT_USER=${LICENSE_REMEDY_SERVICE_MANAGEMENT_SUITE_CONCURRENT_USER},LICENSE_REMEDY_SERVICE_MANAGEMENT_SUITE_USER=${LICENSE_REMEDY_SERVICE_MANAGEMENT_SUITE_USER},LICENSE_REMEDY_SERVICE_DESK_CONCURRENT_USER=${LICENSE_REMEDY_SERVICE_DESK_CONCURRENT_USER},LICENSE_REMEDY_SERVICE_DESK_USER=${LICENSE_REMEDY_SERVICE_DESK_USER},LICENSE_REMEDY_SERVICE_OPTIMIZATION_CONCURRENT_USER=${LICENSE_REMEDY_SERVICE_OPTIMIZATION_CONCURRENT_USER},LICENSE_REMEDY_SERVICE_OPTIMIZATION_USER=${LICENSE_REMEDY_SERVICE_OPTIMIZATION_USER},CHATBOT_CUSTOMER_CAPACITY=${CHATBOT_CUSTOMER_CAPACITY},COGNITIVE_AUTOMATION_CAPACITY=${COGNITIVE_AUTOMATION_CAPACITY},COGNITIVE_SEARCH_CAPACITY=${COGNITIVE_SEARCH_CAPACITY},USER_APPLYING_LICENSE=${USER_APPLYING_LICENSE},CUSTOMER_SIZE=${CUSTOMER_SIZE}"
                                // #echo 'https://github.bmc.com/raw/core-remedy/helix-deploy-playbooks/converged-platform/Template.sh'
                                // playbooksRepo="${PLAYBOOKS_REPO}"
                                // replaceStr="github.bmc.com/raw"
                                // playbooks_repo_url="${playbooksRepo/github.bmc.com/$replaceStr}"
                                // playbooks_repo_rawUrl="${playbooks_repo_url/.git/}"
                                // #echo '$playbooks_repo_rawUrl/${PLAYBOOKS_REPO_VERSION}/Template.sh'
                                // #curl --user ${GIT_USERNAME}:${GIT_PASSWORD} -LJO https://github.bmc.com/raw/core-remedy/helix-deploy-playbooks/converged-platform/Template.sh
                                // curl --user ${GIT_USERNAME}:${GIT_PASSWORD} -LJO $playbooks_repo_rawUrl/${PLAYBOOKS_REPO_VERSION}/Template.sh
                                // echo ${EXCUTE_UPDATE_CUSTOMER_CONFIG} ''' + DEPLOYMENT_TYPE + ''' ${customer_file} ${playbook_template_file} ${input_parameter}
                                // python ${EXCUTE_UPDATE_CUSTOMER_CONFIG} ''' + DEPLOYMENT_TYPE + ''' ${customer_file} ${playbook_template_file} ${input_parameter} > /tmp/inputfile_compareLog
                                // #python ${EXCUTE_UPDATE_CUSTOMER_CONFIG} ''' + DEPLOYMENT_TYPE + ''' ${customer_file} ${playbook_template_file} ${input_parameter}
                                // chmod +x /tmp/inputfile_compareLog
                                // addparams=0
                                // removeparams=0
                                // tr '\n' ' ' < /tmp/inputfile_compareLog | grep -E "Need to add to customer file set\\(\\[\\]\\)" || addparams=$?
                                // #[[ -ne 0 ]] && echo "Diff is present and some params are needed to add to customer file" && addparams=1
                                // tr '\n' ' ' < /tmp/inputfile_compareLog | grep -E "Need to remove from customer file set\\(\\[\\]\\)" || removeparams=$?
                                // #[[ -ne 0 ]] && echo "Diff is present and some params are needed to remove from customer file" && removeparams=1
                                // if [ "$addparams" -eq 0 -a "$removeparams" -eq 0 ]
                                // then
                                //     echo "NO diff found. Skipping checkin"   
                                // else
                                //     git add -A
                                //     git status
                                //     git config --global user.email "pipeline@bmc.com"
                                //     git config --global user.name "Pipeline"
                                //     git commit -m "Pipeline adding Inputs for ${CUSTOMER_SERVICE} for ${ENVIRONMENT} by ${USER_APPLYING_LICENSE}" 
                                //     export REPO_URL=$(echo $CUSTOMER_CONFIGS | awk -v GIT_USERNAME=$GIT_USERNAME -v GIT_PASSWORD=$GIT_PASSWORD -F"\\/\\/" \'{print $1 "//" GIT_USERNAME ":" GIT_PASSWORD "@" $2}\')
                                //     git push $REPO_URL
                                // fi
                                // '''
                                // }
                            }
                            else{
                                withCredentials([usernamePassword(credentialsId: "${CHECKOUT_USING_USER}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                                sh '''
                                set +x
                                . ${WORKSPACE}/pipeline/vars/common-environment.vars
                                set -x
                                mkdir -p ${WORKSPACE}/environments
                                
                                rm -rf ${WORKSPACE}/$(echo $(basename ${CUSTOMER_CONFIGS}) |cut -d'.' -f 1) ${WORKSPACE}/environments/$(echo $(basename ${CUSTOMER_CONFIGS}) |cut -d'.' -f 1)
                                
                                CUSTOMER_CONFIGS=$(echo $CUSTOMER_CONFIGS | awk -v GIT_USERNAME=$GIT_USERNAME -v GIT_PASSWORD=$GIT_PASSWORD -F"\\/\\/" \'{print $1 "//" GIT_USERNAME ":" GIT_PASSWORD "@" $2}\')
                                git clone ${CUSTOMER_CONFIGS}
                                cp -R ${WORKSPACE}/$(echo $(basename ${CUSTOMER_CONFIGS}) |cut -d'.' -f 1)/* ${WORKSPACE}/environments
                                
                                customer_file=${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}.sh
                                cp ${customer_file} ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}_bk.sh
                                playbook_template_file=${WORKSPACE}/environments/Template.sh
                                input_parameter="SOURCE_VERSION=${SOURCE_VERSION},TARGET_VERSION=${TARGET_VERSION},SMARTAPPS_HELM_VERSION=${SMARTAPPS_HELM_VERSION},HELIX_REMEDY=${HELIX_REMEDY},HELIX_DWP=${HELIX_DWP},HELIX_DWPA=${HELIX_DWPA},HELIX_BWF=${HELIX_BWF},HELIX_MCSM=${HELIX_MCSM},HELIX_ITSM_INSIGHT=${HELIX_ITSM_INSIGHTS},BLUEMIX_HELIX_COGNITIVE_CHATBOT=${BLUEMIX_HELIX_COGNITIVE_CHATBOT},BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN=${BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN},BLUEMIX_HELIX_COGNITIVE_AUTOMATION=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION},BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN},BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN},BLUEMIX_HELIX_COGNITIVE_SEARCH=${BLUEMIX_HELIX_COGNITIVE_SEARCH},BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN=${BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN},CUSTOMER_SIZE=${CUSTOMER_SIZE}"
                                echo '${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_PLATFORM_DEPLOY/remedy/Playbooks/Template.sh'
                                #curl --user ${GIT_USERNAME}:${GIT_PASSWORD} -LJO https://github.bmc.com/raw/core-remedy/helix-deploy-playbooks/converged-platform/Template.sh
                                cp ${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_PLATFORM_DEPLOY/remedy/Playbooks/Template.sh ${WORKSPACE}/environments
                                echo ${EXCUTE_UPDATE_CUSTOMER_CONFIG} ''' + DEPLOYMENT_TYPE + ''' ${customer_file} ${playbook_template_file} ${input_parameter}
                                #python ${EXCUTE_UPDATE_CUSTOMER_CONFIG} ''' + DEPLOYMENT_TYPE + ''' ${customer_file} ${playbook_template_file} ${input_parameter}
                                python ${EXCUTE_UPDATE_CUSTOMER_CONFIG} ''' + DEPLOYMENT_TYPE + ''' ${customer_file} ${playbook_template_file} ${input_parameter} > /tmp/inputfile_compareLog
                                chmod +x /tmp/inputfile_compareLog
                                addparams=0
                                removeparams=0
                                diffPresence=0
                                tr '\n' ' ' < /tmp/inputfile_compareLog | grep -E "Need to add to customer file set\\(\\[\\]\\)" || addparams=$?
                                tr '\n' ' ' < /tmp/inputfile_compareLog | grep -E "Need to remove from customer file set\\(\\[\\]\\)" || removeparams=$?
                                #if [ "$addparams" -eq 0 -a "$removeparams" -eq 0 ]
                                #then
                                #    echo "NO diff found. Skipping checkin"   
                                #else
                                    rm -rf /${WORKSPACE}/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)/customer
                                    cp -R ${WORKSPACE}/environments/customer /${WORKSPACE}/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)
                                    cd /${WORKSPACE}/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)
                                    git add -A
                                    git commit -am "Pipeline Adding input file" | grep "nothing to commit" || diffPresence=$?
                                    echo "Difference between file in repo and file to be checked in is(1 means YES, 0 means NO) : $diffPresence"
                                    if [ "$diffPresence" -ne 0 ]
                                    then
                                        git push ${CUSTOMER_CONFIGS}   
                                    else
                                        echo "No diff found and hence nothing to commit and skipping check-in."
                                    fi
                                    git push ${CUSTOMER_CONFIGS}
                                #fi
                                rm -rf /${WORKSPACE}/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)/customer/
                                '''
                            }
                            }
                        }
                    }

                    stage("Validate RSSO"){
                    
                        validate_rsso()
                        // if("${VALIDATE_RSSO}" == "true")
                        // {        
                        //     log.info("START(VALIDATE_RSSO):========================================================================")
                        //     sh "dos2unix ${WORKSPACE}/pipeline/jenkinsfile/rsso_token_id_create.sh"
                        //     sh "chmod +x $WORKSPACE/pipeline/jenkinsfile/rsso_token_id_create.sh"
                            
                        //     env.RSSO_TOKEN_ID=sh(returnStdout: true, script: """$WORKSPACE/pipeline/jenkinsfile/rsso_token_id_create.sh ${WORKSPACE} ${CUSTOMER_SERVICE} ${ENVIRONMENT}""").trim()
                        //     echo "RSSO_TOKEN_ID value is as follows : ${env.RSSO_TOKEN_ID}"
                        //     log.info("END(VALIDATE_RSSO):==========================================================================")            
                        // }
                        // else{
                        //         log.info("START(VALIDATE_RSSO):========================================================================")
                        //         log.info("SKIPPING STAGE VALIDATE_RSSO")
                        //         log.info("END(VALIDATE_RSSO):==========================================================================")
                        // }

                    }

                    //stage("Helix Pre Process"){
                    
                    //     helix_pre_process()

                     //}

                    // stage("Helix Pre CutOver"){
                    
                    //     helix_pre_cutover()
                    // }

                    stage("Helix Remedy Platform"){
                    
                        helix_platform_deploy()
                    }
                    stage("Helix Remedy Smartreporting"){
                    
                        helix_smartreporting_deploy()
                    }

                    stage("Helix Remedy Apps"){
                        helix_non_platform_deploy()

                    }                                                    
                    
                    stage("Helix Configure ITSM Apps"){
                        helix_configure_itsm()
                    }

                
                    stage("Helix  Deploy Smart Apps"){
                        helix_smartapps_deploy()

                    }

                    //stage("Helix Smart Apps Config"){
                        //helix_smartapps_config()
                    //}                

                    stage("Helix Deploy Support Assistant Tool"){
                        if("${SUPPORT_ASSISTANT_TOOL}" == "true")
                        { 
                            log.info("START(Helix Deploy Support Assistant Tool):========================================================================")
                            def result = build job: 'SUPPORT_ASSISTANT_TOOL', parameters: [
                                string(name: 'ASSISTANT_TOOL_REPO', value: "${params.DEVOPS_REPO}"),
                                string(name: 'CUSTOMER_CONFIG_REPO', value: "${params.CUSTOMER_CONFIGS}"),
                                string(name: 'AGENT', value: "${params.AGENT}"),
                                string(name: 'CHECKOUT_USING_USER', value: "${params.CHECKOUT_USING_USER}"),
                                string(name: 'CUSTOMER_SERVICE', value: "${params.CUSTOMER_SERVICE}"),
                                string(name: 'ENVIRONMENT', value: "${params.ENVIRONMENT}"),
                                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                booleanParam(name: 'SUPPORT_ASSISTANT_CREATE_ROLE', value: "${params.SUPPORT_ASSISTANT_CREATE_ROLE}"),
                                string(name: 'SUPPORT_ASSISTANT_SERVICE_ACCOUNT', value: "${params.SUPPORT_ASSISTANT_SERVICE_ACCOUNT}")
                            ]
                            
                
                            log.info("END(SUPPORT_ASSISTANT_TOOL):==========================================================================")
                        }else{
                            log.info("START(SUPPORT_ASSISTANT_TOOL):========================================================================")
                            log.info("SKIPPING STAGE SUPPORT_ASSISTANT_TOOL")
                            log.info("END(SUPPORT_ASSISTANT_TOOL):==========================================================================")
                        }
                    
                    }

                    // stage("Helix Post CutOver"){
                    
                    //     helix_post_cutover()
                    // }
                 
                    stage("Helix ITSM Interops Pipeline"){
                                            
                        helix_interops_deploy()
                    }

                    stage("Helix Full Stack Upgrade"){
                                            
                        helix_full_stack_upgrade()
                    }

                    // stage("SetForceChangePassword"){
                    //     setforcechangepassword()
                    // }

                    stage("Helix Post Deploy Config"){
                        post_deploy_config()
                    }

                    stage("Helix DR"){
                                            
                        helix_dr()
                    }

                    stage("Helix Restart"){
                                            
                        helix_restart()
                    }

                    stage("Env Files Cleanup"){
                        cleanup()
                        // sh '''
                        // rm -rf ${WORKSPACE}/environments/customer/*
                        // rm -rf /tmp/InputFile
                        // '''
                    }

                }
            }
            catch(Exception e){
                        cleanup()
                        echo "Exception occured : ${e}"
                        currentBuild.result = 'FAILURE'
                }
            finally{
                    cleanup()
                    env.NOTIFICATION_SUBJECT="${env.PIPELINE_NAME} ${env.PIPELINE_TYPE} for ${mergedParams.CLUSTER}-${mergedParams.CUSTOMER_NAME}-${mergedParams.ENVIRONMENT}-${mergedParams.VERSION} activity status: ${currentBuild.currentResult}"
                    //sendEmail("${env.NOTIFICATION_SUBJECT}","${NOTIFYLIST}","");
                        
                }
            }
    }

    def helix_platform_deploy(){
        if("${HELIX_PLATFORM_DEPLOY}" == "true")
                        {
                            
                            if("${DEPLOYMENT_MODE}" == "FRESH" || "${DEPLOYMENT_MODE}" == "SERVICE"){
                            log.info("START(HELIX_PLATFORM_DEPLOY):========================================================================")
                                def result = build job: 'HELIX_PLATFORM_DEPLOY', parameters: [
                                booleanParam(name: 'IS_HELM3', value: "true"),
                                string(name: 'HELM_BINARY', value: "${HELM_BINARY}"),																												
                                string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                                string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                                string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_PLATFORM_DEPLOY"),
                                string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                                string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                                string(name: 'ENV_FILENAME', value: "${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}.sh"),
                                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                //booleanParam(name: 'FORCE_DEPLOY', value: "${mergedParams.ROLLING_RESTART}")
                                
                            ]
                            println result.getRawBuild().getLog()
                            log.info("END(HELIX_PLATFORM_DEPLOY):==========================================================================")
                            }
                            
                            if("${DEPLOYMENT_MODE}" == "UPDATE"){
                            log.info("START(HELIX_PLATFORM_UPDATE):========================================================================")
                                def result = build job: 'HELIX_PLATFORM_UPDATE', parameters: [
                                booleanParam(name: 'IS_HELM3', value: "true"),
                                string(name: 'HELM_BINARY', value: "${HELM_BINARY}"),																												
                                string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                                string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                                string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_PLATFORM_UPDATE"),
                                string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                                string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                                string(name: 'ENV_FILENAME', value: "${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}.sh"),
                                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                booleanParam(name: 'AUTOROLLBACK', value: "false"),
                                
                            ]
                            println result.getRawBuild().getLog()
                            log.info("END(HELIX_PLATFORM_UPDATE):==========================================================================")
                            }

                            // if("${DEPLOYMENT_MODE}" == "UPGRADE"){
                            // log.info("START(HELIX_PLATFORM_UPGRADE):========================================================================")
                            //     def result = build job: 'HELIX_PLATFORM_UPGRADE', parameters: [
                            //     booleanParam(name: 'IS_HELM3', value: "true"),
                            //     string(name: 'HELM_BINARY', value: "${HELM_BINARY}"),																												
                            //     string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                            //     string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                            //     string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_PLATFORM_UPGRADE"),
                            //     string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                            //     string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                            //     string(name: 'ENV_FILENAME', value: "${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}.sh"),
                            //     booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                
                            // ]
                            // println result.getRawBuild().getLog()
                            // log.info("END(HELIX_PLATFORM_UPGRADE):==========================================================================")
                            // }

                            }
                            
                            else{
                            log.info("START(HELIX_PLATFORM_DEPLOY):========================================================================")
                            log.info("SKIPPING STAGE HELIX_PLATFORM_DEPLOY")
                            log.info("END(HELIX_PLATFORM_DEPLOY):==========================================================================")
                            }

    }
    def helix_smartreporting_deploy(){
        if("${HELIX_SMARTREPORTING_DEPLOY}" == "true")
            {
                
                if("${DEPLOYMENT_MODE}" == "FRESH"){
                log.info("START(HELIX_SMARTREPORTING_DEPLOY):========================================================================")
                    def result = build job: 'HELIX_SMARTREPORTING_DEPLOY', parameters: [
                    booleanParam(name: 'IS_HELM3', value: "true"),
                    string(name: 'HELM_BINARY', value: "${HELM_BINARY}"),																												
                    string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                    string(name: 'PLAYBOOKS_REPO_VERSION', value: "${SMARTREPORTING_PLAYBOOKS_REPO_VERSION}"),
                    string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_SMARTREPORTING_DEPLOY"),
                    string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                    string(name: 'PLAYBOOKS_REPO', value: "${SMARTREPORTING_PLAYBOOKS_REPO}"),
                    string(name: 'ENV_FILENAME', value: "sr-inputs-file.sh"),
                    booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                    //booleanParam(name: 'FORCE_DEPLOY', value: "${mergedParams.ROLLING_RESTART}")
                    
                ]
                println result.getRawBuild().getLog()
                log.info("END(HELIX_SMARTREPORTING_DEPLOY):==========================================================================")
                }
                
                //if("${DEPLOYMENT_MODE}" == "UPDATE")
                if ("${DEPLOYMENT_MODE}"=="UPDATE" || "${DEPLOYMENT_MODE}"=="UPGRADE"){
                log.info("START(HELIX_SMARTREPORTING_UPDATE/UPGRADE):========================================================================")
                    def result = build job: 'HELIX_SMARTREPORTING_UPGRADE', parameters: [
                    booleanParam(name: 'IS_HELM3', value: "true"),
                    string(name: 'HELM_BINARY', value: "${HELM_BINARY}"),																												
                    string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                    string(name: 'PLAYBOOKS_REPO_VERSION', value: "${SMARTREPORTING_PLAYBOOKS_REPO_VERSION}"),
                    string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_SMARTREPORTING_UPGRADE"),
                    string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                    string(name: 'PLAYBOOKS_REPO', value: "${SMARTREPORTING_PLAYBOOKS_REPO}"),
                    string(name: 'ENV_FILENAME', value: "sr-inputs-file.sh"),
                    booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                    booleanParam(name: 'AUTOROLLBACK', value: "false"),
                ]
                println result.getRawBuild().getLog()
                log.info("END(HELIX_SMARTREPORTING_UPDATE/UPGRADE):==========================================================================")
                }
            }
                
            else{
            log.info("START(HELIX_SMARTREPORTING_DEPLOY):========================================================================")
            log.info("SKIPPING STAGE HELIX_SMARTREPORTING_DEPLOY")
            log.info("END(HELIX_SMARTREPORTING_DEPLOY):==========================================================================")
            }
    }

    def helix_non_platform_deploy(){
        if("${HELIX_NONPLATFORM_DEPLOY}" == "true")
                        {   
                            if("${DEPLOYMENT_MODE}" == "FRESH" || "${DEPLOYMENT_MODE}" == "SERVICE"){
                            
                            log.info("START(HELIX_NONPLATFORM_DEPLOY):========================================================================")
                            def result = build job: 'HELIX_NON_PLATFORM_DEPLOY', parameters: [
                                booleanParam(name: 'IS_HELM3', value: "true"),
                                string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                                string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                                string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_NON_PLATFORM_DEPLOY"),
                                string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                                string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                                string(name: 'ENV_FILENAME', value: "${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}.sh"),
                                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                //booleanParam(name: 'FORCE_DEPLOY', value: "${mergedParams.ROLLING_RESTART}")
                                
                            ]
                            println result.getRawBuild().getLog()
                            log.info("END(HELIX_NONPLATFORM_DEPLOY):==========================================================================")
                            }
                            if("${DEPLOYMENT_MODE}" == "UPDATE"){
                            log.info("START(HELIX_NONPLATFORM_UPDATE):========================================================================")
                            def result = build job: 'HELIX_NON_PLATFORM_UPDATE', parameters: [
                                booleanParam(name: 'IS_HELM3', value: "true"),
                                string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                                string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                                string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_NON_PLATFORM_UPDATE"),
                                string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                                string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                                string(name: 'ENV_FILENAME', value: "${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}.sh"),
                                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                booleanParam(name: 'AUTOROLLBACK', value: "false"),
                            ]
                            println result.getRawBuild().getLog()
                            log.info("END(HELIX_NONPLATFORM_UPDATE):==========================================================================")
                            }

                            // if("${DEPLOYMENT_MODE}" == "UPGRADE"){
                            // log.info("START(HELIX_NONPLATFORM_DEPLOY):========================================================================")
                            // def result = build job: 'HELIX_NON_PLATFORM_UPGRADE', parameters: [
                            //     booleanParam(name: 'IS_HELM3', value: "true"),
                            //     string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                            //     string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                            //     string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_NON_PLATFORM_UPGRADE"),
                            //     string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                            //     string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                            //     string(name: 'ENV_FILENAME', value: "${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}.sh"),
                            //     booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                
                            // ]
                            // println result.getRawBuild().getLog()
                            // log.info("END(HELIX_NONPLATFORM_DEPLOY):==========================================================================")
                            // }

                        }else{
                            log.info("START(HELIX_NONPLATFORM_DEPLOY):========================================================================")
                            log.info("SKIPPING STAGE HELIX_NONPLATFORM_DEPLOY")
                            log.info("END(HELIX_NONPLATFORM_DEPLOY):==========================================================================")

                        }

    }

    def helix_configure_itsm(){
        if("${HELIX_CONFIGURE_ITSM}" == "true"){
            log.info("START(HELIX_CONFIGURE_ITSM):========================================================================")
            def result = build job: 'HELIX_CONFIGURE_ITSM', parameters: [
            string(name: 'CUSTOMER_CONFIG_REPO', value: "${params.CUSTOMER_CONFIGS}"),
            string(name: 'BRANCH', value: "${VERSION}"),
            string(name: 'CHECKOUT_USING_USER', value: "${params.CHECKOUT_USING_USER}"),
            string(name: 'CUSTOMER_SERVICE', value: "${CUSTOMER_SERVICE}"),
            string(name: 'ENVIRONMENT', value: "${ENVIRONMENT}"),
            string(name: 'AGENT', value: "${params.AGENT}"),
            string(name: 'DEVOPS_REPO', value: "${params.DEVOPS_REPO}"),
            booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}") ]
            println result.getRawBuild().getLog()
            log.info("END(HELIX_CONFIGURE_ITSM):==========================================================================")
        }else{
            log.info("START(HELIX_CONFIGURE_ITSM):========================================================================")
            log.info("SKIPPING STAGE HELIX_CONFIGURE_ITSM")
            log.info("END(HELIX_CONFIGURE_ITSM):==========================================================================")
        }
    }

    def helix_smartapps_deploy(){
        if("${HELIX_SMARTAPPS_DEPLOY}" == "true")
                        {   
                            
                            log.info("START(HELIX_SMARTAPPS_DEPLOY):========================================================================")
                            def result = build job: 'HELIX_SMARTAPPS_DEPLOY', parameters: [
                                booleanParam(name: 'IS_HELM3', value: "true"),
                                string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                                string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                                string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_SMARTAPPS_DEPLOY"),
                                string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                                string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                                string(name: 'ENV_FILENAME', value: "${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}.sh"),
                                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                booleanParam(name: 'AUTOROLLBACK', value: "false"),
                                //booleanParam(name: 'FORCE_DEPLOY', value: "${mergedParams.ROLLING_RESTART}")
                            ]
                            println result.getRawBuild().getLog()

                            log.info("END(HELIX_SMARTAPPS_DEPLOY):==========================================================================")
                            
                           

                        }else{
                            log.info("START(HELIX_SMARTAPPS_DEPLOY):========================================================================")
                            log.info("SKIPPING STAGE HELIX_SMARTAPPS_DEPLOY")
                            log.info("END(HELIX_SMARTAPPS_DEPLOY):==========================================================================")
                        }
    }

    def helix_smartapps_config(){
        if("${HELIX_SMARTAPPS_CONFIG}" == "true")
                        {   
                            
                            log.info("START(HELIX_SMARTAPPS_CONFIG):========================================================================")
                            def result = build job: 'HELIX_SMARTAPPS_CONFIG', parameters: [
                                booleanParam(name: 'IS_HELM3', value: "true"),
                                string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                                string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                                string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_SMARTAPPS_CONFIG"),
                                string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                                string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                                string(name: 'ENV_FILENAME', value: "${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}.sh"),
                                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                booleanParam(name: 'AUTOROLLBACK', value: "false"),
                                //booleanParam(name: 'FORCE_DEPLOY', value: "${mergedParams.ROLLING_RESTART}")
                            ]
                            println result.getRawBuild().getLog()

                            log.info("END(HELIX_SMARTAPPS_CONFIG):==========================================================================")
                            
                           

                        }else{
                            log.info("START(HELIX_SMARTAPPS_CONFIG):========================================================================")
                            log.info("SKIPPING STAGE HELIX_SMARTAPPS_CONFIG")
                            log.info("END(HELIX_SMARTAPPS_CONFIG):==========================================================================")
                        }
    }

    def helix_interops_deploy(){
        if("${HELIX_INTEROPS_DEPLOY}" == "true")
        {
            log.info("START(Helix ITSM Interops Pipeline):========================================================================")
                            def result = build job: 'HELIX_ITSM_INTEROPS', parameters: [
                                string(name: 'DEVOPS_REPO', value: "${params.DEVOPS_REPO}"),
                                string(name: 'CUSTOMER_REPO', value: "${params.CUSTOMER_CONFIGS}"),
                                string(name: 'VERSION', value: "${mergedParams.VERSION}"),
                                string(name: 'CHECKOUT_USING_USER', value: "${params.CHECKOUT_USING_USER}"),
                                string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/INTEROPS/HELIX_INTEROPS"),
                                string(name: 'AGENT', value: "${AGENT}"),
                                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                                string(name: 'HELIX_PLATFORM_DOMAIN', value: "${HELIX_PLATFORM_DOMAIN}"),
                                string(name: 'HELIX_PLATFORM_CLUSTER', value: "${HELIX_PLATFORM_CLUSTER}"),
                                string(name: 'HELIX_PLATFORM_NAMESPACE', value: "${HELIX_PLATFORM_NAMESPACE}"),
                                string(name: 'CP_CLUSTER', value: "${mergedParams.CLUSTER}"),
                                // string(name: 'ITSM_INSIGHTS_SERVICEID', value: "${ITSM_INSIGHTS_SERVICEID}"),
                                // string(name: 'IS_SERVICEID', value: "${IS_SERVICEID}"),
                                // string(name: 'SMARTIT_SERVICEID', value: "${SMARTIT_SERVICEID}"),
                                // string(name: 'BWF_SERVICEID', value: "${BWF_SERVICEID}"),
                                // string(name: 'DWP_SERVICEID', value: "${DWP_SERVICEID}"),
                                // string(name: 'DWPA_SERVICEID', value: "${DWPA_SERVICEID}"),
                                string(name: 'KUBECONFIG_CREDENTIAL', value: "${HELIX_PLATFORM_KUBECONFIG_CREDENTIAL}"),
                                string(name: 'TENANTNAME', value: "${CUSTOMER_SERVICE}"),
                                string(name: 'CUSTOMER_NAME', value: "${HELIX_PLATFORM_CUSTOMER_NAME}"),
                                string(name: 'ENVIRONMENT', value: "${ENVIRONMENT}"),
                                string(name: 'CP_CUSTOMER_NAME', value: "${CUSTOMER_SERVICE}"),
                                string(name: 'CP_ENVIRONMENT', value: "${ENVIRONMENT}"),																 
                               
                                //string(name: 'ITSM_USER', value: "${ITSM_USER}"),
								string(name: 'ITSM_USER', value: "hannah_admin"),
                                //password(name: 'ITSM_PASSWORD', value: "${ITSM_PASSWORD}"),
								password(name: 'ITSM_PASSWORD', value: "${mergedParams.BAKEDUSER_HANNAH_ADMIN_PASSWORD}"),
                                string(name: 'RSSO_USER', value: "${RSSO_ADMIN_USER}"),
                                password(name: 'RSSO_PASSWORD', value: "${RSSO_ADMIN_PASSWORD}"),
                                booleanParam(value: "${BMC_HELIX_ITSM_INSIGHTS}", name: 'BMC_HELIX_ITSM_INSIGHTS'),
                                booleanParam(value: "${BMC_HELIX_SMART_IT}", name: 'BMC_HELIX_SMART_IT'),
                                booleanParam(value: "${BMC_HELIX_BWF}", name: 'BMC_HELIX_BWF'),
                                booleanParam(value: "${BMC_HELIX_DWP}", name: 'BMC_HELIX_DWP'),
                                booleanParam(value: "${BMC_HELIX_INNOVATION_STUDIO}", name: 'BMC_HELIX_INNOVATION_STUDIO'),
                                booleanParam(value: "${BMC_HELIX_DWPA}", name: 'BMC_HELIX_DWPA')

                                
                            ]
                            log.info("END(Helix ITSM Interops Pipeline)==========================================================================")
                        
                    
        }
    }

    def helix_dr(){
        if("${HELIX_DR}" == "true")
        {
            log.info("START(Helix DR):========================================================================")
                            def result = build job: 'HELIX_DR', parameters: [
				booleanParam(name: 'IS_HELM3', value: "true"),
                                booleanParam(name: 'SCALE_DOWN', value: "${params.SCALE_DOWN}"),
                                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),

                                string(name: 'HELM_BINARY', value: "${params.HELM_BINARY}"),                                
                                string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_DR"),
                                string(name: 'CUSTOMER_NAME', value: "${params.CUSTOMER_SERVICE}"),
                                string(name: 'PLAYBOOKS_REPO', value: "${params.PLAYBOOKS_REPO}"),
                                string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                                string(name: 'CUSTOMER_REPO', value: "${params.CUSTOMER_CONFIGS}"),
                                string(name: 'ENV_FILENAME', value: "${params.CUSTOMER_SERVICE}-${params.ENVIRONMENT}.sh")                                
                            ]
                            log.info("END(Helix DR Pipeline)==========================================================================")
                        
                    
        }
    }

    def secretCreate(){
                    sh'''
                    set +x
                    chmod 777 /tmp/InputFile
                    . /tmp/InputFile
                    set -x
                    createSecret () {
                            set +x
                            kubectl create secret docker-registry ${IMAGEPULLSECRETS_NAME} --docker-server=${REGISTRY} --docker-username=${IMAGE_REGISTRY_USERNAME} --docker-password=${IMAGE_REGISTRY_PASSWORD} -n "${PROJECT_NAME}"
                            [[ $? -ne 0 ]] && echo "Unable to generate secret." && exit 1;
                            echo "secret is generated successfully"
                            set -x
                            }
                            secretChk=0
                            kubectl get secret ${IMAGEPULLSECRETS_NAME} -n "${PROJECT_NAME}" | grep "${IMAGEPULLSECRETS_NAME}" || secretChk=$?
                            if [ "$secretChk" -ne 0 ]
                            then
                                echo "Secret not found. Creating it."
                                createSecret
                            else
                                kubectl delete secret ${IMAGEPULLSECRETS_NAME} -n "${PROJECT_NAME}"
                                [[ $? -ne 0 ]] && echo "Could not delete Secret" && exit 1;
                                echo "Secret is already Present. Deleting and recreating it with the registry credentials provided."
                                createSecret
                            fi
                    '''
    }
    
    def helix_fluentbit_deploy(){
        stage("Helix Fluentbit Deploy"){
                    
                            log.info("START(Helix FLUENTBIT Deploy):========================================================================")
                            def result = build job: 'HELIX_FLUENTBIT_DEPLOY', parameters: [
                                string(name: 'FLUENTBIT_REPO', value: "${params.DEVOPS_REPO}"),
                                string(name: 'CUSTOMER_CONFIG_REPO', value: "${params.CUSTOMER_CONFIGS}"),
                                string(name: 'AGENT', value: "${params.AGENT}"),
                                string(name: 'CHECKOUT_USING_USER', value: "${params.CHECKOUT_USING_USER}"),
                                string(name: 'CUSTOMER_SERVICE', value: "${params.CUSTOMER_SERVICE}"),
                                string(name: 'ENVIRONMENT', value: "${params.ENVIRONMENT}"),
                                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}")
                            ]
                            
                
                            log.info("END(FLUENTBIT_DEPLOY):==========================================================================")
                                            
                    }
    }
    def set_git_global_config(){
        sh '''
        echo "Setting up git global config parameters"
        git config --global user.email "pipeline@bmc.com"
        git config --global user.name "Pipeline"
        echo "Git global config parameters setup is Successful"
        '''
    }

    def uploadManualFile_local(){
        withCredentials([usernamePassword(credentialsId: "${CHECKOUT_USING_USER}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh '''
                                set +x
                                rm -rf ${WORKSPACE}/$(echo $(basename ${CUSTOMER_CONFIGS}) |cut -d'.' -f 1) ${WORKSPACE}/environments/$(echo $(basename ${CUSTOMER_CONFIGS}) |cut -d'.' -f 1)
                                CUSTOMER_CONFIGS=$(echo $CUSTOMER_CONFIGS | awk -v GIT_USERNAME=$GIT_USERNAME -v GIT_PASSWORD=$GIT_PASSWORD -F"\\/\\/" \'{print $1 "//" GIT_USERNAME ":" GIT_PASSWORD "@" $2}\')
                                git clone ${CUSTOMER_CONFIGS}
                                mkdir -p ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}
                                mv /tmp/InputFile ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}.sh
                                dos2unix ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}.sh
                                rm -rf /${WORKSPACE}/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)/customer/${CUSTOMER_SERVICE}
                                mkdir -p ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/staging/configmapfiles/certs/
                                if [ -f "${WORKSPACE}/environments/customer/customCerts/cacerts" ]; then
                                cp ${WORKSPACE}/environments/customer/customCerts/cacerts ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/staging/configmapfiles/certs/
                                else
                                    cp ${WORKSPACE}/pipeline/tasks/cacerts ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/staging/configmapfiles/certs/
                                fi
                                yes | cp -R ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE} /${WORKSPACE}/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)/customer/

                                diffPresence=0
                                cd /${WORKSPACE}/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)
                                git add -A
                                #git commit -am "Pipeline Adding input file"
                                #git push ${CUSTOMER_CONFIGS}

                                git commit -am "Pipeline Adding input file" | grep "nothing to commit" || diffPresence=$?
                                echo "Difference between file in repo and file to be checked in is(1 means YES, 0 means NO) : $diffPresence"
                                if [ "$diffPresence" -ne 0 ]
                                then
                                    git push ${CUSTOMER_CONFIGS}   
                                else
                                    echo "No diff found and hence nothing to commit and skipping check-in."
                                fi
                                git push ${CUSTOMER_CONFIGS}

                            '''
                        }
    }

    def uploadManualFile_github(){
        withCredentials([usernamePassword(credentialsId: "${CHECKOUT_USING_USER}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                            sh'''
                            mv /tmp/InputFile ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}.sh
                            dos2unix ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}.sh
                            if [ -f "${WORKSPACE}/environments/customer/customCerts/cacerts" ]; then
                                cp ${WORKSPACE}/environments/customer/customCerts/cacerts ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/staging/configmapfiles/certs/
                            else
                                cp ${WORKSPACE}/pipeline/tasks/cacerts ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/staging/configmapfiles/certs/
                            fi
                            cd ${WORKSPACE}/environments
                            git add -A
                            git status
                            git config --global user.email "pipeline@bmc.com"
                            git config --global user.name "Pipeline"
                            git commit -m "Pipeline adding Inputs for ${CUSTOMER_SERVICE} for ${ENVIRONMENT} by ${USER_APPLYING_LICENSE}"
                            export REPO_URL=$(echo $CUSTOMER_CONFIGS | awk -v GIT_USERNAME=$GIT_USERNAME -v GIT_PASSWORD=$GIT_PASSWORD -F"\\/\\/" \'{print $1 "//" GIT_USERNAME ":" GIT_PASSWORD "@" $2}\')
                            git push $REPO_URL
                            '''
        }
    }

    def passwordchk(){
        if ("${INPUT_CONFIG_METHOD}"=="Generate_Input_File"){
            def pwdparams = "IMAGE_REGISTRY_PASSWORD,FTS_ELASTICSEARCH_USER_PASSWORD,BAKEDUSER_HANNAH_ADMIN_PASSWORD,AR_DB_PASSWORD,AR_SERVER_APP_SERVICE_PASSWORD,AR_SERVER_DSO_USER_PASSWORD,AR_SERVER_MIDTIER_SERVICE_PASSWORD,VC_RKM_PASSWORD,VC_PROXY_USER_PASSWORD,DWP_CONFIG_SUBTENANT_USER_PASSWORD,RSSO_ADMIN_PASSWORD"
            def arr = pwdparams.split(",")
            for (i in arr){
                def j = "${env."$i"}"
                if (j.isEmpty()){
                    currentBuild.result = 'ABORTED'
                    error("$i is empty. Make sure all required password params are provided with needed value")
                }
            }
            if ("${DB_TYPE}"=="postgres" && "${DATABASE_RESTORE}"=="true" && ("${DATABASE_ADMIN_PASSWORD}"=="" || "${DATABASE_ADMIN_USER}"=="")){
                currentBuild.result = 'ABORTED'
                error("DATABASE_ADMIN_USER (or) DATABASE_ADMIN_PASSWORD values can't be empty incase of postgres DB.")
            }
            if ("${DB_TYPE}"!="postgres" && "${DB_SSL_ENABLED}"=="true"){
                currentBuild.result = 'ABORTED'
                error("DB connection encryption is supported only with Postgres DB.")
            }
            if ("${GIT_USER_HOME_DIR}"=="" || "${TENANT_DOMAIN}"==""){
                currentBuild.result = 'ABORTED'
                error("At least one of GIT_USER_HOME_DIR, TENANT_DOMAIN parameter values are blank. Provide necessary value.")
            }
            if ("${HELIX_SMARTREPORTING_DEPLOY}"=="true" && "${SMARTREPORTING_DB_PASSWORD}"==""){
                currentBuild.result = 'ABORTED'
                error("SMARTREPORTING_DB_PASSWORD value is empty.")
            }
            //if ("${HELIX_INTEROPS_DEPLOY}"=="true" && "${ITSM_PASSWORD}"==""){
                //currentBuild.result = 'ABORTED'
                //error("ITSM_PASSWORD value is empty.")
            //}
            if ("${SIDECAR_FLUENTBIT}"=="true" && "${LOGS_ELASTICSEARCH_HOSTNAME}"==""){
                currentBuild.result = 'ABORTED'
                error("LOGS_ELASTICSEARCH_HOSTNAME shuld not be empty when SIDECAR_FLUENTBIT is selected.")
            }
            if ("${DEPLOYMENT_MODE}"=="UPDATE" || "${DEPLOYMENT_MODE}"=="UPGRADE"){
                if ("${SOURCE_VERSION}"=="NA"){
                    currentBuild.result = 'ABORTED'
                    error("When Deployment mode is UPDATE or UPGRADE, provide valid SOURCE_VERSION value.")
                }
                if ("${HELIX_SMARTREPORTING_DEPLOY}"=="true" && "${SMARTREPORTING_SOURCE_VERSION}"=="NA"){
                    currentBuild.result = 'ABORTED'
                    error("When Deployment mode is UPDATE or UPGRADE, provide valid SMARTREPORTING_SOURCE_VERSION value.")
                }
                if ("${HELIX_CONFIGURE_ITSM}"=="true"){
                    currentBuild.result = 'ABORTED'
                    error("HELIX_CONFIGURE_ITSM execution is not applicable for UPDATE or UPGRADE deployment.")
                }
            }
        }
    }

    def copycustomcerts(){
        if("${CACERTS_FILE}" != ""  || "${DB_SSL_CERT}" != ""){
            log.info("before unstash of cacerts file")
            if("${CACERTS_FILE}" != ""){ unstashParam "CACERTS_FILE" }
            if("${DB_SSL_CERT}" != ""){ unstashParam "DB_SSL_CERT" }
            log.info("after unstash of cacerts file")
            sh '''
                set +x
                mkdir -p /tmp
                if [ -f "${CACERTS_FILE}" ]; then
                cp "${CACERTS_FILE}" "/tmp/CACertsFile"
                fi
                if [ -f "${DB_SSL_CERT}" ]; then
                cp "${DB_SSL_CERT}" "/tmp/dbrootcrt"
                fi
                #echo "CACERTSFILE: " $CACERTS_FILE
            '''
                if("${LOCAL_GIT}"=="true"){
                    withCredentials([usernamePassword(credentialsId: "${CHECKOUT_USING_USER}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh '''
                        set -vx
                        rm -rf ${WORKSPACE}/$(echo $(basename ${CUSTOMER_CONFIGS}) |cut -d'.' -f 1) ${WORKSPACE}/environments/$(echo $(basename ${CUSTOMER_CONFIGS}) |cut -d'.' -f 1)
                        CUSTOMER_CONFIGS=$(echo $CUSTOMER_CONFIGS | awk -v GIT_USERNAME=$GIT_USERNAME -v GIT_PASSWORD=$GIT_PASSWORD -F"\\/\\/" \'{print $1 "//" GIT_USERNAME ":" GIT_PASSWORD "@" $2}\')
                        cd ${WORKSPACE}/environments
                        git clone ${CUSTOMER_CONFIGS}
                        diffPresence=0
                        #pwd
                        mkdir -p ${WORKSPACE}/environments/customer/customCerts ${WORKSPACE}/environments/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)/customer/customCerts
                        #mkdir -p ${WORKSPACE}/environments/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)/customer/customCerts
                        echo "dir created with ${WORKSPACE}/environments/customer/customCerts"
                        if [ -f "/tmp/CACertsFile" ]; then
                            mv /tmp/CACertsFile ${WORKSPACE}/environments/customer/customCerts/cacerts
                            echo "custom certs file is moved to ${WORKSPACE}/environments"
                        fi
                        if [ -f "/tmp/dbrootcrt" ]; then
                            mv /tmp/dbrootcrt ${WORKSPACE}/environments/customer/customCerts/root.crt
                            echo "db root.crt file is moved to ${WORKSPACE}/environments"
                        fi
                        
                        cp -R ${WORKSPACE}/environments/customer/customCerts/* /${WORKSPACE}/environments/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)/customer/customCerts
                        cd /${WORKSPACE}/environments/$(echo $(basename $CUSTOMER_CONFIGS) | cut -d'.' -f 1)
                        git add -A
                        git commit -am "Pipeline Adding cacerts file" | grep "nothing to commit" || diffPresence=$?
                        if [ "$diffPresence" -ne 0 ]
                        then
                            git push ${CUSTOMER_CONFIGS}   
                        else
                            echo "No diff found and hence nothing to commit and skipping check-in."
                        fi
                        #git push ${CUSTOMER_CONFIGS}
                    '''
                    }
                }else{
                    withCredentials([usernamePassword(credentialsId: "${CHECKOUT_USING_USER}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh'''
                    mkdir -p ${WORKSPACE}/environments/customer/customCerts
                    rm -rf ${WORKSPACE}/environments/customer/customCerts/cacerts
                    mv /tmp/CACertsFile ${WORKSPACE}/environments/customer/customCerts/cacerts
                    diffPresence=0
                    cd ${WORKSPACE}/environments
                    git add -A
                    git status
                    git config --global user.email "pipeline@bmc.com"
                    git config --global user.name "Pipeline"
                    git commit -m "Pipeline adding cacerts for ${CUSTOMER_SERVICE} for ${ENVIRONMENT} by ${USER_APPLYING_LICENSE}" | grep "nothing to commit" || diffPresence=$?
                    if [ "$diffPresence" -ne 0 ]
                    then
                        export REPO_URL=$(echo $CUSTOMER_CONFIGS | awk -v GIT_USERNAME=$GIT_USERNAME -v GIT_PASSWORD=$GIT_PASSWORD -F"\\/\\/" \'{print $1 "//" GIT_USERNAME ":" GIT_PASSWORD "@" $2}\')
                        git push $REPO_URL
                    else
                        echo "No diff found and hence nothing to commit and skipping check-in."
                    fi
                    '''
                    }
                }
            }else{
                    log.info("START(Copy Customer Certs):========================================================================")
                    log.info("SKIPPING STAGE Copy Customer Certs")
                    log.info("END(Copy Customer Certs):==========================================================================")
            }
    }

    def helix_restart(){
        if("${HELIX_RESTART}" == "true")
        {
            log.info("START(HELIX_RESTART):========================================================================")
            def result = build job: 'HELIX_RESTART', parameters: [
                booleanParam(name: 'IS_HELM3', value: "true"),
                string(name: 'HELM_BINARY', value: "${HELM_BINARY}"),																												
                string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_RESTART"),
                string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                string(name: 'ENV_FILENAME', value: "${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}.sh"),
                string(name: 'COMPONENT_NAME', value: "all"),
                booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}")
            ]
             log.info("END(HELIX_RESTART):==========================================================================")
        }else{
            log.info("START(HELIX_RESTART):========================================================================")
            log.info("SKIPPING STAGE HELIX_RESTART")
            log.info("END(HELIX_RESTART):==========================================================================")
        }
    }

    def helix_pre_process(){
        if("${HELIX_PRE_PROCESS}" == "true")
        {
            if("${DEPLOYMENT_MODE}" == "UPGRADE"){
                log.info("START(HELIX_PRE_PROCESS):========================================================================")
                    def result = build job: 'HELIX_PRE_PROCESS', parameters: [
                    booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                    string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                    //string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                    string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                    string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),                 
                    //string(name: 'ENV_FILENAME', value: "PrePostUpgrade-Input.sh"),
                ]
                println result.getRawBuild().getLog()
                log.info("END(HELIX_PRE_PROCESS):==========================================================================")
            }
        }
        else{
                    log.info("START(HELIX_PRE_PROCESS):========================================================================")
                    log.info("SKIPPING STAGE HELIX_PRE_PROCESS")
                    log.info("END(HELIX_PRE_PROCESS):==========================================================================")
        }
    }

    def helix_pre_cutover(){
        if("${HELIX_PRE_CUTOVER}" == "true")
        {
            if("${DEPLOYMENT_MODE}" == "UPGRADE"){
                log.info("START(HELIX_PRE_CUTOVER):========================================================================")
                    def result = build job: 'HELIX_PRE_CUTOVER', parameters: [
                    booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                    string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                    //string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                    string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                    string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),                 
                    //string(name: 'ENV_FILENAME', value: "PrePostUpgrade-Input.sh"),
                ]
                println result.getRawBuild().getLog()
                log.info("END(HELIX_PRE_CUTOVER):==========================================================================")
            }
        }
        else{
                    log.info("START(HELIX_PRE_CUTOVER):========================================================================")
                    log.info("SKIPPING STAGE HELIX_PRE_CUTOVER")
                    log.info("END(HELIX_PRE_CUTOVER):==========================================================================")
        }
    }

    def helix_post_cutover(){
        if("${HELIX_POST_CUTOVER}" == "true")
        {
            if("${DEPLOYMENT_MODE}" == "UPGRADE"){
                log.info("START(HELIX_POST_CUTOVER):========================================================================")
                    def result = build job: 'HELIX_POST_CUTOVER', parameters: [
                    booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                    string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                    //string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                    string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                    string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),                 
                    //string(name: 'ENV_FILENAME', value: "PrePostUpgrade-Input.sh"),
                ]
                println result.getRawBuild().getLog()
                log.info("END(HELIX_POST_CUTOVER):==========================================================================")
            }
        }
        else{
                    log.info("START(HELIX_POST_CUTOVER):========================================================================")
                    log.info("SKIPPING STAGE HELIX_POST_CUTOVER")
                    log.info("END(HELIX_POST_CUTOVER):==========================================================================")
        }
    }
    
    def setforcechangepassword(){
        if("${HELIX_POST_DEPLOY_CONFIG}" == "true"){
            if("${DEPLOYMENT_MODE}" == "FRESH"){
                sh'''
                    customer_file=${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}.sh
                    set +vx
                    set -a
                    . $customer_file
                    set +a
                    IS_URL="https://"${PROJECT_NAME}-is.${DOMAIN_NAME}
                    TOKEN=$(curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "username=${AR_USER}&password=${AR_PASSWORD}" "${IS_URL}/api/jwt/login" -s)
                    RESULT=$(curl -X PUT -H "Authorization: AR-JWT ${TOKEN}" -H "Content-Type: application/json" --data '{"values":{"Force Password Change On Login":"Yes"}}' ${IS_URL}/api/arsys/v1/entry/User/000000000000001)
                '''
            }
            else{
                log.info("START(SET_FORCE_CHANGE_PASSWORD):========================================================================")
                log.info("SKIPPING STAGE SET_FORCE_CHANGE_PASSWORD")
                log.info("END(SET_FORCE_CHANGE_PASSWORD):==========================================================================")
            }
        }
    }

    def validate_rsso(){
        if("${VALIDATE_RSSO}" == "true"){        
            log.info("START(VALIDATE_RSSO):========================================================================")
            sh "dos2unix ${WORKSPACE}/pipeline/jenkinsfile/rsso_token_id_create.sh"
            sh "chmod +x $WORKSPACE/pipeline/jenkinsfile/rsso_token_id_create.sh"
            
            env.RSSO_TOKEN_ID=sh(returnStdout: true, script: """$WORKSPACE/pipeline/jenkinsfile/rsso_token_id_create.sh ${WORKSPACE} ${CUSTOMER_SERVICE} ${ENVIRONMENT}""").trim()
            echo "RSSO_TOKEN_ID value is as follows : ${env.RSSO_TOKEN_ID}"
            log.info("END(VALIDATE_RSSO):==========================================================================")            
        }
        else{
                log.info("START(VALIDATE_RSSO):========================================================================")
                log.info("SKIPPING STAGE VALIDATE_RSSO")
                log.info("END(VALIDATE_RSSO):==========================================================================")
        }
    }

    def post_deploy_config(){
        if("${HELIX_POST_DEPLOY_CONFIG}" == "true"){   
            if("${DEPLOYMENT_MODE}" == "FRESH"){
                log.info("START(HELIX_POST_DEPLOY_CONFIG):========================================================================")
                def result = build job: 'HELIX_POST_DEPLOY_CONFIG', parameters: [
                    string(name: 'SERVICE_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                    string(name: 'ENVIRONMENT', value: "${mergedParams.ENVIRONMENT}"),
                    string(name: 'AGENT', value: "${AGENT}"),
                    string(name: 'DOMAIN', value: "${mergedParams.CLUSTER_DOMAIN}"),
                    password(name: 'HANNAH_ADMIN_PASSWORD', value: "${mergedParams.BAKEDUSER_HANNAH_ADMIN_PASSWORD}")                                
                ]
                println result.getRawBuild().getLog()

                log.info("END(HELIX_POST_DEPLOY_CONFIG):==========================================================================")
            }else{
                log.info("START(HELIX_POST_DEPLOY_CONFIG):========================================================================")
                log.info("SKIPPING STAGE HELIX_POST_DEPLOY_CONFIG")
                log.info("END(HELIX_POST_DEPLOY_CONFIG):==========================================================================")
            }
        }
    }

    def helix_full_stack_upgrade(){
        if("${HELIX_FULL_STACK_UPGRADE}" == "true"){
            if("${DEPLOYMENT_MODE}" == "UPGRADE"){
                log.info("START(HELIX_FULL_STACK_UPGRADE):========================================================================")
                    def result = build job: 'HELIX_FULL_STACK_UPGRADE', parameters: [
                    booleanParam(name: 'IS_HELM3', value: "true"),
                    string(name: 'HELM_BINARY', value: "${HELM_BINARY}"),																												
                    string(name: 'CUSTOMER_NAME', value: "${mergedParams.CUSTOMER_SERVICE}"),
                    string(name: 'PLAYBOOKS_REPO_VERSION', value: "${PLAYBOOKS_REPO_VERSION}"),
                    string(name: 'LOCATION', value: "${GIT_USER_HOME_DIR}/ANSIBLE_PLAYBOOKS/HELIX_FULL_STACK_UPGRADE"),
                    string(name: 'CUSTOMER_REPO', value: "${CUSTOMER_CONFIGS}"),
                    string(name: 'PLAYBOOKS_REPO', value: "${PLAYBOOKS_REPO}"),
                    string(name: 'ENV_FILENAME', value: "${mergedParams.CUSTOMER_SERVICE}-${mergedParams.ENVIRONMENT}.sh"),
                    booleanParam(name: 'LOCAL_GIT', value: "${LOCAL_GIT}"),
                    
                ]
                println result.getRawBuild().getLog()
                log.info("END(HELIX_FULL_STACK_UPGRADE):==========================================================================")
            }else{
                log.info("DEPLOYMENT_MODE is not 'UPGRADE'. Skipping 'HELIX_FULL_STACK_UPGRADE' execution.")
            }

        }else{
            log.info("SKIPPING STAGE HELIX_FULL_STACK_UPGRADE")
        }
    }

    def updateinputfile_notlocalgit(){
        sh'''                             
            rm -rf ${WORKSPACE}/environments/*
            #cd ${WORKSPACE}/environments
            '''
            dir("environments"){
            checkOut("${CUSTOMER_CONFIGS}","master","${CHECKOUT_USING_USER}")
            }
            withCredentials([usernamePassword(credentialsId: "${CHECKOUT_USING_USER}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
            sh'''
            . ${WORKSPACE}/pipeline/vars/common-environment.vars
            cd ${WORKSPACE}/environments
            echo ${CUSTOMER_SERVICE}
            echo ${ENVIRONMENT}
            
            customer_file=${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}.sh
            cp ${customer_file} ${WORKSPACE}/environments/customer/${CUSTOMER_SERVICE}/${CUSTOMER_SERVICE}-${ENVIRONMENT}_bk.sh
            playbook_template_file=${WORKSPACE}/environments/Template.sh
            input_parameter="TARGET_VERSION=${TARGET_VERSION},SMARTAPPS_HELM_VERSION=${SMARTAPPS_HELM_VERSION},HELIX_REMEDY=${HELIX_REMEDY},HELIX_DWP=${HELIX_DWP},HELIX_DWPA=${HELIX_DWPA},HELIX_BWF=${HELIX_BWF},HELIX_MCSM=${HELIX_MCSM},HELIX_ITSM_INSIGHT=${HELIX_ITSM_INSIGHTS},BLUEMIX_HELIX_COGNITIVE_CHATBOT=${BLUEMIX_HELIX_COGNITIVE_CHATBOT},BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN=${BLUEMIX_HELIX_COGNITIVE_CHATBOT_PLAN},BLUEMIX_HELIX_COGNITIVE_AUTOMATION=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION},BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION_NLC_PLAN},BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN=${BLUEMIX_HELIX_COGNITIVE_AUTOMATION_TONEANALYZER_PLAN},BLUEMIX_HELIX_COGNITIVE_SEARCH=${BLUEMIX_HELIX_COGNITIVE_SEARCH},BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN=${BLUEMIX_HELIX_COGNITIVE_SEARCH_PLAN},LICENSE_REMEDY_SERVICE_MANAGEMENT_SUITE_CONCURRENT_USER=${LICENSE_REMEDY_SERVICE_MANAGEMENT_SUITE_CONCURRENT_USER},LICENSE_REMEDY_SERVICE_MANAGEMENT_SUITE_USER=${LICENSE_REMEDY_SERVICE_MANAGEMENT_SUITE_USER},LICENSE_REMEDY_SERVICE_DESK_CONCURRENT_USER=${LICENSE_REMEDY_SERVICE_DESK_CONCURRENT_USER},LICENSE_REMEDY_SERVICE_DESK_USER=${LICENSE_REMEDY_SERVICE_DESK_USER},LICENSE_REMEDY_SERVICE_OPTIMIZATION_CONCURRENT_USER=${LICENSE_REMEDY_SERVICE_OPTIMIZATION_CONCURRENT_USER},LICENSE_REMEDY_SERVICE_OPTIMIZATION_USER=${LICENSE_REMEDY_SERVICE_OPTIMIZATION_USER},CHATBOT_CUSTOMER_CAPACITY=${CHATBOT_CUSTOMER_CAPACITY},COGNITIVE_AUTOMATION_CAPACITY=${COGNITIVE_AUTOMATION_CAPACITY},COGNITIVE_SEARCH_CAPACITY=${COGNITIVE_SEARCH_CAPACITY},USER_APPLYING_LICENSE=${USER_APPLYING_LICENSE},CUSTOMER_SIZE=${CUSTOMER_SIZE}"
            #echo 'https://github.bmc.com/raw/core-remedy/helix-deploy-playbooks/converged-platform/Template.sh'
            playbooksRepo="${PLAYBOOKS_REPO}"
            replaceStr="github.bmc.com/raw"
            playbooks_repo_url="${playbooksRepo/github.bmc.com/$replaceStr}"
            playbooks_repo_rawUrl="${playbooks_repo_url/.git/}"
            #echo '$playbooks_repo_rawUrl/${PLAYBOOKS_REPO_VERSION}/Template.sh'
            #curl --user ${GIT_USERNAME}:${GIT_PASSWORD} -LJO https://github.bmc.com/raw/core-remedy/helix-deploy-playbooks/converged-platform/Template.sh
            curl --user ${GIT_USERNAME}:${GIT_PASSWORD} -LJO $playbooks_repo_rawUrl/${PLAYBOOKS_REPO_VERSION}/Template.sh
            echo ${EXCUTE_UPDATE_CUSTOMER_CONFIG} ''' + DEPLOYMENT_TYPE + ''' ${customer_file} ${playbook_template_file} ${input_parameter}
            python ${EXCUTE_UPDATE_CUSTOMER_CONFIG} ''' + DEPLOYMENT_TYPE + ''' ${customer_file} ${playbook_template_file} ${input_parameter} > /tmp/inputfile_compareLog
            #python ${EXCUTE_UPDATE_CUSTOMER_CONFIG} ''' + DEPLOYMENT_TYPE + ''' ${customer_file} ${playbook_template_file} ${input_parameter}
            chmod +x /tmp/inputfile_compareLog
            addparams=0
            removeparams=0
            tr '\n' ' ' < /tmp/inputfile_compareLog | grep -E "Need to add to customer file set\\(\\[\\]\\)" || addparams=$?
            #[[ -ne 0 ]] && echo "Diff is present and some params are needed to add to customer file" && addparams=1
            tr '\n' ' ' < /tmp/inputfile_compareLog | grep -E "Need to remove from customer file set\\(\\[\\]\\)" || removeparams=$?
            #[[ -ne 0 ]] && echo "Diff is present and some params are needed to remove from customer file" && removeparams=1
            if [ "$addparams" -eq 0 -a "$removeparams" -eq 0 ]
            then
                echo "NO diff found. Skipping checkin"   
            else
                git add -A
                git status
                git config --global user.email "pipeline@bmc.com"
                git config --global user.name "Pipeline"
                git commit -m "Pipeline adding Inputs for ${CUSTOMER_SERVICE} for ${ENVIRONMENT} by ${USER_APPLYING_LICENSE}" 
                export REPO_URL=$(echo $CUSTOMER_CONFIGS | awk -v GIT_USERNAME=$GIT_USERNAME -v GIT_PASSWORD=$GIT_PASSWORD -F"\\/\\/" \'{print $1 "//" GIT_USERNAME ":" GIT_PASSWORD "@" $2}\')
                git push $REPO_URL
            fi
            '''
        }
    }


    def cleanup(){
        sh '''
            rm -rf ${WORKSPACE}/environments/customer/*
            rm -rf ${WORKSPACE}/environments/$(basename ${CUSTOMER_CONFIGS} | cut -d'.' -f 1)
            rm -rf ${WORKSPACE}/$(basename ${CUSTOMER_CONFIGS} | cut -d'.' -f 1)
            rm -rf /tmp/InputFile
        '''
    }

    def setPipelineProperties()
    {
        env.PIPELINE_TYPE="Uber"
        env.PIPELINE_NAME="Helix OnPrem Deployment"
    }
